{"version":3,"sources":["commons-web.module.js","commons/array-join-with/array.join.with.module.js","commons/confirm/confirm.module.js","commons/dynamic-height/dynamic-height.module.js","commons/filters/filters.module.js","commons/focus/focus.module.js","commons/les-key-press/les-key-press.module.js","commons/handler/les-handlers.module.js","commons/locale/locale.module.js","commons/location/location.module.js","commons/notification/notification.module.js","commons/short-name/short-name.module.js","commons/user/user.module.js","commons/validation/form.validation.module.js","partials/footer/footer.module.js","partials/top/top.module.js","partials/header/header.module.js","components/click-overlay/click-overlay.module.js","components/language-select/language-select.module.js","components/les-commands/les.commands.module.js","components/les-date-format/les-date-format.module.js","components/les-email-pattern/les.email.pattern.module.js","components/les-plate-pattern/les.plate.pattern.module.js","components/loader/loader.module.js","components/les-phone-pattern/les.phone.pattern.module.js","components/steps-indicator/steps-indicator.module.js","commons-web.config.js","commons-web.run.js","commons-web.provider.js","commons/ng-tags-input2.js","commons/confirm/confirm.service.js","commons/dynamic-height/dynamic-height.directive.js","commons/filters/filter.by.i18n.filter.js","commons/focus/focus.directive.js","commons/focus/focus.on.directive.js","commons/les-key-press/on-enter-press.directive.js","commons/les-key-press/on-tab-press.directive.js","commons/handler/error.handler.interceptor.js","commons/handler/lang.handler.interceptor.js","commons/locale/locale.available-languages.service.js","commons/locale/locale.service.js","commons/location/location.country.service.js","commons/location/location.estate.service.js","commons/notification/notification.service.js","commons/short-name/short-name.filter.js","commons/user/user.context.service.js","commons/validation/form.validation.element.modifier.js","commons/validation/form.validation.message.resolver.js","commons/validation/form.validation.ngmodel.decorator.js","commons/validation/form.validation.submit.directive.js","commons/validation/form.validation.validator.alphanumeric.js","commons/validation/form.validation.validator.equals.js","commons/validation/form.validation.validator.length.js","commons/validation/form.validation.validator.string-time.js","partials/footer/footer-public.directive.js","partials/footer/footer-totem.directive.js","partials/footer/footer.directive.js","partials/header/header-public.directive.js","partials/header/header-totem.directive.js","components/click-overlay/click-overlay.directive.js","components/language-select/language-select.controller.js","components/language-select/language-select.directive.js","components/les-commands/les.commands.directive.js","components/les-commands/les.commands.service.js","components/les-date-format/les-date-format.filter.js","components/les-email-pattern/les.email.pattern.directive.js","components/les-plate-pattern/les.plate.pattern.directive.js","components/loader/loader.directive.js","components/les-phone-pattern/les.phone.pattern.directive.js","components/steps-indicator/steps-indicator.directive.js","partials/top/public/top-public.controller.js","partials/top/public/top-public.directive.js","../../tmp/templates.js"],"names":["angular","module","config","Array","prototype","joinWith","b","select","a","this","m","length","n","c","i","x","j","y","push","$permissionProvider","lesCommonsWebServiceProvider","setBasePath","suppressUndefinedPermissionWarning","run","validator","lesElementModifier","lesErrorMessageResolver","lesCommonsWebService","blockUIConfig","setValidElementStyling","registerDomModifier","key","setDefaultElementModifier","setErrorMessageResolver","resolve","templateUrl","base","path","getBasePath","service","$get","provider","KEYS","backspace","tab","enter","escape","space","up","down","left","right","delete","comma","MAX_SAFE_INTEGER","SUPPORTED_INPUT_TYPES","tagsInput2","directive","$timeout","$document","$window","$q","tagsInput2Config2","tiUtil2","TagList","options","events","onTagAdding","onTagRemoving","getTagText","setTagText","canAddTag","canRemoveTag","self","tag","safeToString","displayProperty","text","tagText","valid","minLength","maxLength","allowedTagsPattern","test","findInObjectArray","items","keyProperty","when","$tag","then","promisifyValue","addText","add","replaceSpacesWithDashes","trigger","remove","index","splice","clearSelection","selected","selectPrior","selectNext","removeSelected","validateType","type","indexOf","restrict","require","scope","tags","templateScope","tagClass","onTagAdded","onInvalidTag","onTagRemoved","onTagClicked","replace","transclude","controller","$scope","$attrs","$element","simplePubSub","load","template","String","placeholder","tabindex","Number","removeTagSymbol","fromCharCode","Boolean","addOnEnter","addOnSpace","addOnComma","addOnBlur","addOnPaste","pasteSplitPattern","RegExp","enableEditingLastTag","minTags","maxTags","allowLeftoverText","addFromautoComplete2Only","spellcheck","tagList","handleUndefinedResult","registerautoComplete2","find","addTag","getTags","getCurrentTagText","newTag","getOptions","getTemplateScope","on","name","handler","registerTagItem","removeTag","disabled","link","element","attrs","ngModelCtrl","setElementValidity","focusInput","hotkeys","input","validationOptions","$setValidity","hasFocus","focus","$isEmpty","value","isDefined","invalid","track","getTagClass","$index","$selected","$watch","makeObjectArray","$validate","$observe","eventHandlers","keydown","$event","blur","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","paste","getTextData","clipboardData","originalEvent","getData","host","click","$setDirty","e","triggerHandler","event","shouldAdd","shouldRemove","shouldSelect","shouldEditLastTag","keyCode","addKeys","isModifierOn","preventDefault","data","split","forEach","tagsInput2Ctrl","$$template","$$removeTagSymbol","$getDisplayText","$removeTag","$sce","SuggestionList","loadFn","getDifference","lastPromise","getTagId","array1","array2","filter","item","defaultComparer","reset","visible","query","show","selectFirstMatch","debounce","promise","$query","slice","maxResultsToShow","debounceDelay","scrollToElement","root","eq","parent","elementTop","elementHeight","parentHeight","parentScrollTop","source","matchClass","highlightMatchedText","loadOnDownArrow","loadOnEmpty","loadOnFocus","suggestionList","registerautoComplete2Match","getQuery","shouldLoadSuggestions","addSuggestionByIndex","addSuggestion","added","copy","getSuggestionClass","$match","handled","stopImmediatePropagation","autoComplete2Ctrl","autoComplete2","$parent","$highlight","safeHighlight","trustAsHtml","ctrl","transcludeFn","clone","append","span","resize","threshold","getTextAutosizeThreshold","css","originalValue","width","isString","$parsers","unshift","$formatters","$modelValue","tiBindAttrs2","$set","globalDefaults","interpolationStatus","autosizeThreshold","setDefaults","defaults","setActiveInterpolation","setTextAutosizeThreshold","$interpolate","converters","parseInt","toLowerCase","defaultValidator","localDefault","converter","getDefault","updateValue","globalValue","newValue","factory","fn","delay","timeoutId","args","arguments","cancel","apply","array","isArray","isObject","newArray","obj","comparer","some","str","escapeRegexChars","encodeHTML","expression","match","isUndefined","toString","trim","valueIfUndefined","result","shiftKey","ctrlKey","altKey","metaKey","names","first","method","call","handlers","every","$templateCache","put","$confirm","$translate","confirm","confirmConfiguration","instant","defaultConfiguration","translateParameters","parameters","title","ok","breakLine","windowClass","undefined","parameter","dynamicHeight","deltaY","$eval","offsetHeight","search","filtered","map","includes","ngAutofocus","$inject","focusOn","$attr","_focusVal","bindEnterPressEvent","bind","which","$apply","onEnterPress","bindTabPressEvent","onTabPress","errorHttpInterceptor","notificationService","blockUI","responseError","rejection","console","log","status","errors","errorWithParams","error","warningWithParams","warning","stop","reject","langHttpInterceptor","localeService","request","headers","language","getCurrentLanguageType","availableLanguagesService","code","displayName","localStorageService","tmhDynamicLocale","changeLocale","newLocale","use","set","removeLocale","localeKey","getCurrentLocale","get","currentLocale","currentLanguage","lang","locationCountryService","$http","getCountries","url","response","content","getCountryByCode","locationEstateService","getStateById","id","getEstates","countryIsoCode3","params","growl","$transitions","getMessageDuration","message","words","msPerWord","duration","minDuration","hasTtl","keepOnRouteChange","merge","variables","ttl","growlConfiguration","growlMessages","success","info","errorItem","clearErrorsOnChangeRoute","onSuccess","destroy","disableIcons","disableCountDown","shortName","longName","firstName","shift","lastName","pop","userContextService","getCurrentDock","updateCurrentDock","dock","LesElementModifierFn","$log","el","removeClass","findWithClassElementAsc","klass","returnEl","hasClass","findFormGroupElement","logInvalidStructure","makeInvalid","errorMsg","frmGroupEl","addClass","makeDefault","waitForAsyncValidators","formatString","string","number","convertToTrainCase","getParameters","errorType","attr","focusCustomComponents","context","form","group","$","closest","is","getMessageTypeOverride","overrideKey","defer","messageTypeOverride","errorMessage","messageFormated","$provide","decorator","$delegate","shouldSetBlurUpdateEvent","nodeName","inputType","isDatePicker","getAttribute","compileFn","compile","pre","ctrls","ngModelOptions","$options","updateOn","updateOnDefault","post","attributes","document","querySelector","lesSubmit","$validators","lesAlphanumericValidator","modelValue","viewValue","alphanumericRegex","modelToMatch","lesEqualsValidator","minLengh","lesMinLengthValidator","arr","lesEqualsLengthValidator","stringTimeRegex","lesStringTimeValidator","year","Date","getFullYear","initial","headerModel","model","close","languageSelectController","$state","activate","availableLanguages","currentLang","changeLanguage","reload","controllerAs","bindToController","rootElement","$filter","CommandsService","translate","hide","toggle","chosen","combo","allowIn","description","callback","go","command","state","commands","extend","lesDateFormat","moment","date","format","inputEmailId","isRequired","placeholderText","inputName","hasVirtualKeyboard","isNotValid","cleanEmptyModel","inputPlateId","capitalize","toUpperCase","inputPhoneId","steps","isVisible","step","isDone","stepIndex","stringifyStepClass","getStepIndex","visibleSteps","_step","currentStepIndex","stateName","$current","publicTopController"],"mappings":"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","file":"commons-web.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('commons-web', [\n        // Vendors\n        'angularMoment',\n        'angular-confirm',\n        'ui.bootstrap',\n        'ui.calendar',\n        'ui.router',\n        'permission',\n        'permission.ui',\n        'ui.sortable',\n        'uiSwitch',\n        'blockUI',\n\n        'ngSanitize',\n        'ngCookies',\n        'ngMessages',\n        'ngTable',\n        'ngTagsInput',\n\n        'LocalStorageModule',\n        'pascalprecht.translate',\n        'tmh.dynamicLocale',\n        'jcs-autoValidate',\n        'angularFileUpload',\n        'localytics.directives',\n\n        // Commons\n        'les-handlers',\n        'les-array-join-with',\n        'les-confirm',\n        'les-focus',\n        'les-filters',\n        'les-dynamic-height',\n        'les-locale',\n        'les-location',\n        'les-short-name',\n        'les-user',\n        'les-key-press',\n        'les-validation',\n\n        // Components\n        'ngTagsInput2', // Gambiarra por causa do teclado virtual do totem\n        'language-select',\n        'les-notification-dialog',\n        'les-loader',\n        'les-email-pattern',\n        'les-plate-pattern',\n        'les-phone-pattern',\n        'les-steps-indicator',\n        'les-date-format',\n        'les-commands',\n        'click-overlay',\n\n        // Partials\n        'les-top',\n        'les-header',\n        'les-footer'\n    ]);\n})();\n","(function() {\n    'use strict';\n    angular.module('les-array-join-with', []).config(function() {\n    \t\n    \tif (!Array.prototype.joinWith) {\n    \t\tArray.prototype.joinWith = function(b, select) {\n    \t\t\tvar a = this;\n    \t\t\tvar m = a.length, n = b.length, c = [];\n\n    \t\t\tfor (var i = 0; i < m; i++) {\n    \t\t\t\tvar x = a[i];\n\n    \t\t\t\tfor (var j = 0; j < n; j++) {\n    \t\t\t\t\tvar y = select(x, b[j]);\n    \t\t\t\t\tif (y) {\n    \t\t\t\t\t\tc.push(y);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\treturn c;\n    \t\t};\n    \t}\n    \t\n    });\n    \n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-confirm', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-dynamic-height', []);\n})();\n","(function() {\n    'use strict';\n    angular.module('les-filters', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-focus', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-key-press', []);\n})();\n","(function() {\n    'use strict';\n    \n    angular.module('les-handlers', []);\n    \n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-locale', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-location', []);\n})();\n","(function() {\n    'use strict';\n    angular.module('les-notification-dialog', ['angular-growl']);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-short-name', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-user', []);\n})();\n","(function() {\n    'use strict';\n    angular.module('les-validation', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-footer', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-top', ['les-user']);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-header', []);\n})();\n","(function () {\n    'use strict';\n    angular.module('click-overlay', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('language-select', []);\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-commands', ['cfp.hotkeys']);\n\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-date-format', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-email-pattern', ['ngTagsInput2']);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-plate-pattern', ['ngTagsInput2']);\n})();\n","(function () {\n    'use strict';\n    angular.module('les-loader', []);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-phone-pattern', ['ngTagsInput2']);\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-steps-indicator', []);\n})();\n","(function() {\n    'use strict';\n\n    angular.module('commons-web').config(function($permissionProvider, lesCommonsWebServiceProvider) {\n        lesCommonsWebServiceProvider.setBasePath('');\n        $permissionProvider.suppressUndefinedPermissionWarning(true);\n    });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('commons-web')\n        .run(function(validator, lesElementModifier, lesErrorMessageResolver, lesCommonsWebService, blockUIConfig) {\n            validator.setValidElementStyling(false);\n            validator.registerDomModifier(lesElementModifier.key, lesElementModifier);\n            validator.setDefaultElementModifier(lesElementModifier.key);\n            validator.setErrorMessageResolver(lesErrorMessageResolver.resolve);\n            // validator.defaultFormValidationOptions.validateOnFormSubmit = true;\n\n            blockUIConfig.templateUrl = lesCommonsWebService.base + 'partials/block-ui/block-ui.html';\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular.module('commons-web').provider('lesCommonsWebService', lesCommonsWebServiceProvider);\n\n    function lesCommonsWebServiceProvider() {\n        var base;\n        var service = {\n            $get: getBasePath,\n            setBasePath: setBasePath\n        };\n\n        function setBasePath(path) {\n            base = path;\n        }\n\n        function getBasePath() {\n            return {\n                base: base\n            };\n        }\n\n        return service;\n    }\n})();\n","/*!\n * ngTagsInput2 v3.1.1\n * http://mbenford.github.io/ngTagsInput2\n *\n * Copyright (c) 2013-2016 Michael Benford\n * License: MIT\n *\n * Generated at 2016-05-27 12:28:31 -0300\n */\n(function() {\n'use strict';\n\nvar KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    left: 37,\n    right: 39,\n    delete: 46,\n    comma: 188\n};\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar SUPPORTED_INPUT_TYPES = ['text', 'email', 'url'];\n\nvar tagsInput2 = angular.module('ngTagsInput2', []);\n\n/**\n * @ngdoc directive\n * @name tagsInput2\n * @module ngTagsInput2\n *\n * @description\n * Renders an input box with tag editing support.\n *\n * @param {string} ngModel Assignable Angular expression to data-bind to.\n * @param {string=} [template=NA] URL or id of a custom template for rendering each tag.\n * @param {string=} [templateScope=NA] Scope to be passed to custom templates - of both tagsInput2 and\n *    autoComplete2 directives - as $scope.\n * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n * @param {string=} [keyProperty=text] Property to be used as a unique identifier for the tag.\n * @param {string=} [type=text] Type of the input element. Only 'text', 'email' and 'url' are supported values.\n * @param {string=} [text=NA] Assignable Angular expression for data-binding to the element's text.\n * @param {number=} tabindex Tab order of the control.\n * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n * @param {number=} [minLength=3] Minimum length for a new tag.\n * @param {number=} [maxLength=MAX_SAFE_INTEGER] Maximum length allowed for a new tag.\n * @param {number=} [minTags=0] Sets minTags validation error key if the number of tags added is less than minTags.\n * @param {number=} [maxTags=MAX_SAFE_INTEGER] Sets maxTags validation error key if the number of tags added is greater\n *    than maxTags.\n * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n *    the input element when the directive loses focus.\n * @param {string=} [removeTagSymbol=×] (Obsolete) Symbol character for the remove tag button.\n * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n * @param {boolean=} [addOnBlur=true] Flag indicating that a new tag will be added when the input field loses focus.\n * @param {boolean=} [addOnPaste=false] Flag indicating that the text pasted into the input field will be split into tags.\n * @param {string=} [pasteSplitPattern=,] Regular expression used to split the pasted text into tags.\n * @param {boolean=} [replaceSpacesWithDashes=true] Flag indicating that spaces will be replaced with dashes.\n * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into the new tag\n *    input box instead of being removed when the backspace key is pressed and the input box is empty.\n * @param {boolean=} [addFromautoComplete2Only=false] Flag indicating that only tags coming from the autoComplete2 list\n *    will be allowed. When this flag is true, addOnEnter, addOnComma, addOnSpace and addOnBlur values are ignored.\n * @param {boolean=} [spellcheck=true] Flag indicating whether the browser's spellcheck is enabled for the input field or not.\n * @param {expression=} [tagClass=NA] Expression to evaluate for each existing tag in order to get the CSS classes to be used.\n *    The expression is provided with the current tag as $tag, its index as $index and its state as $selected. The result\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\n * @param {expression=} [onTagAdding=NA] Expression to evaluate that will be invoked before adding a new tag. The new\n *    tag is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\n *    promise is returned, the tag will not be added.\n * @param {expression=} [onTagAdded=NA] Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n * @param {expression=} [onInvalidTag=NA] Expression to evaluate when a tag is invalid. The invalid tag is available as $tag.\n * @param {expression=} [onTagRemoving=NA] Expression to evaluate that will be invoked before removing a tag. The tag\n *    is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\n *    promise is returned, the tag will not be removed.\n * @param {expression=} [onTagRemoved=NA] Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n * @param {expression=} [onTagClicked=NA] Expression to evaluate upon clicking an existing tag. The clicked tag is available as $tag.\n */\ntagsInput2.directive('tagsInput2', [\"$timeout\", \"$document\", \"$window\", \"$q\", \"tagsInput2Config2\", \"tiUtil2\", function($timeout, $document, $window, $q, tagsInput2Config2, tiUtil2) {\n    function TagList(options, events, onTagAdding, onTagRemoving) {\n        var self = {}, getTagText, setTagText, canAddTag, canRemoveTag;\n\n        getTagText = function(tag) {\n            return tiUtil2.safeToString(tag[options.displayProperty]);\n        };\n\n        setTagText = function(tag, text) {\n            tag[options.displayProperty] = text;\n        };\n\n        canAddTag = function(tag) {\n            var tagText = getTagText(tag);\n            var valid = tagText &&\n                        tagText.length >= options.minLength &&\n                        tagText.length <= options.maxLength &&\n                        options.allowedTagsPattern.test(tagText) &&\n                        !tiUtil2.findInObjectArray(self.items, tag, options.keyProperty || options.displayProperty);\n\n            return $q.when(valid && onTagAdding({ $tag: tag })).then(tiUtil2.promisifyValue);\n        };\n\n        canRemoveTag = function(tag) {\n            return $q.when(onTagRemoving({ $tag: tag })).then(tiUtil2.promisifyValue);\n        };\n\n        self.items = [];\n\n        self.addText = function(text) {\n            var tag = {};\n            setTagText(tag, text);\n            return self.add(tag);\n        };\n\n        self.add = function(tag) {\n            var tagText = getTagText(tag);\n\n            if (options.replaceSpacesWithDashes) {\n                tagText = tiUtil2.replaceSpacesWithDashes(tagText);\n            }\n\n            setTagText(tag, tagText);\n\n            return canAddTag(tag)\n                .then(function() {\n                    self.items.push(tag);\n                    events.trigger('tag-added', { $tag: tag });\n                })\n                .catch(function() {\n                    if (tagText) {\n                      events.trigger('invalid-tag', { $tag: tag });\n                    }\n                });\n        };\n\n        self.remove = function(index) {\n            var tag = self.items[index];\n\n            return canRemoveTag(tag).then(function() {\n                self.items.splice(index, 1);\n                self.clearSelection();\n                events.trigger('tag-removed', { $tag: tag });\n                return tag;\n            });\n        };\n\n        self.select = function(index) {\n            if (index < 0) {\n                index = self.items.length - 1;\n            }\n            else if (index >= self.items.length) {\n                index = 0;\n            }\n\n            self.index = index;\n            self.selected = self.items[index];\n        };\n\n        self.selectPrior = function() {\n            self.select(--self.index);\n        };\n\n        self.selectNext = function() {\n            self.select(++self.index);\n        };\n\n        self.removeSelected = function() {\n            return self.remove(self.index);\n        };\n\n        self.clearSelection = function() {\n            self.selected = null;\n            self.index = -1;\n        };\n\n        self.clearSelection();\n\n        return self;\n    }\n\n    function validateType(type) {\n        return SUPPORTED_INPUT_TYPES.indexOf(type) !== -1;\n    }\n\n    return {\n        restrict: 'E',\n        require: 'ngModel',\n        scope: {\n            tags: '=ngModel',\n            text: '=?',\n            templateScope: '=?',\n            tagClass: '&',\n            onTagAdding: '&',\n            onTagAdded: '&',\n            onInvalidTag: '&',\n            onTagRemoving: '&',\n            onTagRemoved: '&',\n            onTagClicked: '&',\n        },\n        replace: false,\n        transclude: true,\n        templateUrl: 'ngTagsInput2/tags-input2.html',\n        controller: [\"$scope\", \"$attrs\", \"$element\", function($scope, $attrs, $element) {\n            $scope.events = tiUtil2.simplePubSub();\n\n            tagsInput2Config2.load('tagsInput2', $scope, $attrs, {\n                template: [String, 'ngTagsInput2/tag-item.html'],\n                type: [String, 'text', validateType],\n                placeholder: [String, 'Add a tag'],\n                tabindex: [Number, null],\n                removeTagSymbol: [String, String.fromCharCode(215)],\n                replaceSpacesWithDashes: [Boolean, true],\n                minLength: [Number, 3],\n                maxLength: [Number, MAX_SAFE_INTEGER],\n                addOnEnter: [Boolean, true],\n                addOnSpace: [Boolean, false],\n                addOnComma: [Boolean, true],\n                addOnBlur: [Boolean, true],\n                addOnPaste: [Boolean, false],\n                pasteSplitPattern: [RegExp, /,/],\n                allowedTagsPattern: [RegExp, /.+/],\n                enableEditingLastTag: [Boolean, false],\n                minTags: [Number, 0],\n                maxTags: [Number, MAX_SAFE_INTEGER],\n                displayProperty: [String, 'text'],\n                keyProperty: [String, ''],\n                allowLeftoverText: [Boolean, false],\n                addFromautoComplete2Only: [Boolean, false],\n                spellcheck: [Boolean, true]\n            });\n\n            $scope.tagList = new TagList($scope.options, $scope.events,\n                tiUtil2.handleUndefinedResult($scope.onTagAdding, true),\n                tiUtil2.handleUndefinedResult($scope.onTagRemoving, true));\n\n            this.registerautoComplete2 = function() {\n                var input = $element.find('input');\n\n                return {\n                    addTag: function(tag) {\n                        return $scope.tagList.add(tag);\n                    },\n                    getTags: function() {\n                        return $scope.tagList.items;\n                    },\n                    getCurrentTagText: function() {\n                        return $scope.newTag.text();\n                    },\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    getTemplateScope: function() {\n                        return $scope.templateScope;\n                    },\n                    on: function(name, handler) {\n                        $scope.events.on(name, handler, true);\n                        return this;\n                    }\n                };\n            };\n\n            this.registerTagItem = function() {\n                return {\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    removeTag: function(index) {\n                        if ($scope.disabled) {\n                            return;\n                        }\n                        $scope.tagList.remove(index);\n                    }\n                };\n            };\n        }],\n        link: function(scope, element, attrs, ngModelCtrl) {\n            var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace, KEYS.delete, KEYS.left, KEYS.right],\n                tagList = scope.tagList,\n                events = scope.events,\n                options = scope.options,\n                input = element.find('input'),\n                validationOptions = ['minTags', 'maxTags', 'allowLeftoverText'],\n                setElementValidity,\n                focusInput;\n\n            setElementValidity = function() {\n                ngModelCtrl.$setValidity('maxTags', tagList.items.length <= options.maxTags);\n                ngModelCtrl.$setValidity('minTags', tagList.items.length >= options.minTags);\n                ngModelCtrl.$setValidity('leftoverText', scope.hasFocus || options.allowLeftoverText ? true : !scope.newTag.text());\n            };\n\n            focusInput = function() {\n                $timeout(function() { input[0].focus(); });\n            };\n\n            ngModelCtrl.$isEmpty = function(value) {\n                return !value || !value.length;\n            };\n\n            scope.newTag = {\n                text: function(value) {\n                    if (angular.isDefined(value)) {\n                        scope.text = value;\n                        events.trigger('input-change', value);\n                    }\n                    else {\n                        return scope.text || '';\n                    }\n                },\n                invalid: null\n            };\n\n            scope.track = function(tag) {\n                return tag[options.keyProperty || options.displayProperty];\n            };\n\n            scope.getTagClass = function(tag, index) {\n                var selected = tag === tagList.selected;\n                return [\n                    scope.tagClass({$tag: tag, $index: index, $selected: selected}),\n                    { selected: selected }\n                ];\n            };\n\n            scope.$watch('tags', function(value) {\n                if (value) {\n                    tagList.items = tiUtil2.makeObjectArray(value, options.displayProperty);\n                    scope.tags = tagList.items;\n                }\n                else {\n                    tagList.items = [];\n                }\n            });\n\n            scope.$watch('tags.length', function() {\n                setElementValidity();\n\n                // ngModelController won't trigger validators when the model changes (because it's an array),\n                // so we need to do it ourselves. Unfortunately this won't trigger any registered formatter.\n                ngModelCtrl.$validate();\n            });\n\n            attrs.$observe('disabled', function(value) {\n                scope.disabled = value;\n            });\n\n            scope.eventHandlers = {\n                input: {\n                    keydown: function($event) {\n                        events.trigger('input-keydown', $event);\n                    },\n                    focus: function() {\n                        if (scope.hasFocus) {\n                            return;\n                        }\n\n                        scope.hasFocus = true;\n                        events.trigger('input-focus');\n                    },\n                    blur: function() {\n                        $timeout(function() {\n                            var activeElement = $document.prop('activeElement'),\n                                lostFocusToBrowserWindow = activeElement === input[0],\n                                lostFocusToChildElement = element[0].contains(activeElement);\n\n                            if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                                scope.hasFocus = false;\n                                events.trigger('input-blur');\n                            }\n                        });\n                    },\n                    paste: function($event) {\n                        $event.getTextData = function() {\n                            var clipboardData = $event.clipboardData || ($event.originalEvent && $event.originalEvent.clipboardData);\n                            return clipboardData ? clipboardData.getData('text/plain') : $window.clipboardData.getData('Text');\n                        };\n                        events.trigger('input-paste', $event);\n                    }\n                },\n                host: {\n                    click: function() {\n                        if (scope.disabled) {\n                            return;\n                        }\n                        focusInput();\n                    }\n                },\n                tag: {\n                    click: function(tag) {\n                        events.trigger('tag-clicked', { $tag: tag });\n                    }\n                }\n            };\n\n            events\n                .on('tag-added', scope.onTagAdded)\n                .on('invalid-tag', scope.onInvalidTag)\n                .on('tag-removed', scope.onTagRemoved)\n                .on('tag-clicked', scope.onTagClicked)\n                .on('tag-added', function() {\n                    scope.newTag.text('');\n                })\n                .on('tag-added tag-removed', function() {\n                    scope.tags = tagList.items;\n                    // Ideally we should be able call $setViewValue here and let it in turn call $setDirty and $validate\n                    // automatically, but since the model is an array, $setViewValue does nothing and it's up to us to do it.\n                    // Unfortunately this won't trigger any registered $parser and there's no safe way to do it.\n                    ngModelCtrl.$setDirty();\n                    focusInput();\n                })\n                .on('invalid-tag', function() {\n                    scope.newTag.invalid = true;\n                })\n                .on('option-change', function(e) {\n                    if (validationOptions.indexOf(e.name) !== -1) {\n                        setElementValidity();\n                    }\n                })\n                .on('input-change', function() {\n                    tagList.clearSelection();\n                    scope.newTag.invalid = null;\n                })\n                .on('input-focus', function() {\n                    element.triggerHandler('focus');\n                    ngModelCtrl.$setValidity('leftoverText', true);\n                })\n                .on('input-blur', function() {\n                    if (options.addOnBlur && !options.addFromautoComplete2Only) {\n                        tagList.addText(scope.newTag.text());\n                    }\n                    element.triggerHandler('blur');\n                    setElementValidity();\n                })\n                .on('input-keydown', function(event) {\n                    var key = event.keyCode,\n                        addKeys = {},\n                        shouldAdd, shouldRemove, shouldSelect, shouldEditLastTag;\n\n                    if (tiUtil2.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\n                        return;\n                    }\n\n                    addKeys[KEYS.enter] = options.addOnEnter;\n                    addKeys[KEYS.comma] = options.addOnComma;\n                    addKeys[KEYS.space] = options.addOnSpace;\n\n                    shouldAdd = !options.addFromautoComplete2Only && addKeys[key];\n                    shouldRemove = (key === KEYS.backspace || key === KEYS.delete) && tagList.selected;\n                    shouldEditLastTag = key === KEYS.backspace && scope.newTag.text().length === 0 && options.enableEditingLastTag;\n                    shouldSelect = (key === KEYS.backspace || key === KEYS.left || key === KEYS.right) && scope.newTag.text().length === 0 && !options.enableEditingLastTag;\n\n                    if (shouldAdd) {\n                        tagList.addText(scope.newTag.text());\n                    }\n                    else if (shouldEditLastTag) {\n                        tagList.selectPrior();\n                        tagList.removeSelected().then(function(tag) {\n                            if (tag) {\n                                scope.newTag.text(tag[options.displayProperty]);\n                            }\n                        });\n                    }\n                    else if (shouldRemove) {\n                        tagList.removeSelected();\n                    }\n                    else if (shouldSelect) {\n                        if (key === KEYS.left || key === KEYS.backspace) {\n                            tagList.selectPrior();\n                        }\n                        else if (key === KEYS.right) {\n                            tagList.selectNext();\n                        }\n                    }\n\n                    if (shouldAdd || shouldSelect || shouldRemove || shouldEditLastTag) {\n                        event.preventDefault();\n                    }\n                })\n                .on('input-paste', function(event) {\n                    if (options.addOnPaste) {\n                        var data = event.getTextData();\n                        var tags = data.split(options.pasteSplitPattern);\n\n                        if (tags.length > 1) {\n                            tags.forEach(function(tag) {\n                                tagList.addText(tag);\n                            });\n                            event.preventDefault();\n                        }\n                    }\n                });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiTagItem2\n * @module ngTagsInput2\n *\n * @description\n * Represents a tag item. Used internally by the tagsInput2 directive.\n */\ntagsInput2.directive('tiTagItem2', [\"tiUtil2\", function(tiUtil2) {\n    return {\n        restrict: 'E',\n        require: '^tagsInput2',\n        template: '<ng-include src=\"$$template\"></ng-include>',\n        scope: {\n            $scope: '=scope',\n            data: '='\n        },\n        link: function(scope, element, attrs, tagsInput2Ctrl) {\n            var tagsInput2 = tagsInput2Ctrl.registerTagItem(),\n                options = tagsInput2.getOptions();\n\n            scope.$$template = options.template;\n            scope.$$removeTagSymbol = options.removeTagSymbol;\n\n            scope.$getDisplayText = function() {\n                return tiUtil2.safeToString(scope.data[options.displayProperty]);\n            };\n            scope.$removeTag = function() {\n                tagsInput2.removeTag(scope.$index);\n            };\n\n            scope.$watch('$parent.$index', function(value) {\n                scope.$index = value;\n            });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name autoComplete2\n * @module ngTagsInput2\n *\n * @description\n * Provides autoComplete2 support for the tagsInput2 directive.\n *\n * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n *    $query. The result of the expression must be a promise that eventually resolves to an array of strings.\n * @param {string=} [template=NA] URL or id of a custom template for rendering each element of the autoComplete2 list.\n * @param {string=} [displayProperty=tagsInput2.displayText] Property to be rendered as the autoComplete2 label.\n * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n *    the source option after the last keystroke.\n * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n *    in the source option.\n * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n *    suggestions list.\n * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n * @param {boolean=} [loadOnDownArrow=false] Flag indicating that the source option will be evaluated when the down arrow\n *    key is pressed and the suggestion list is closed. The current input value is available as $query.\n * @param {boolean=} [loadOnEmpty=false] Flag indicating that the source option will be evaluated when the input content\n *    becomes empty. The $query variable will be passed to the expression as an empty string.\n * @param {boolean=} [loadOnFocus=false] Flag indicating that the source option will be evaluated when the input element\n *    gains focus. The current input value is available as $query.\n * @param {boolean=} [selectFirstMatch=true] Flag indicating that the first match will be automatically selected once\n *    the suggestion list is shown.\n * @param {expression=} [matchClass=NA] Expression to evaluate for each match in order to get the CSS classes to be used.\n *    The expression is provided with the current match as $match, its index as $index and its state as $selected. The result\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\n */\ntagsInput2.directive('autoComplete2', [\"$document\", \"$timeout\", \"$sce\", \"$q\", \"tagsInput2Config2\", \"tiUtil2\", function($document, $timeout, $sce, $q, tagsInput2Config2, tiUtil2) {\n    function SuggestionList(loadFn, options, events) {\n        var self = {}, getDifference, lastPromise, getTagId;\n\n        getTagId = function() {\n            return options.tagsInput2.keyProperty || options.tagsInput2.displayProperty;\n        };\n\n        getDifference = function(array1, array2) {\n            return array1.filter(function(item) {\n                return !tiUtil2.findInObjectArray(array2, item, getTagId(), function(a, b) {\n                    if (options.tagsInput2.replaceSpacesWithDashes) {\n                        a = tiUtil2.replaceSpacesWithDashes(a);\n                        b = tiUtil2.replaceSpacesWithDashes(b);\n                    }\n                    return tiUtil2.defaultComparer(a, b);\n                });\n            });\n        };\n\n        self.reset = function() {\n            lastPromise = null;\n\n            self.items = [];\n            self.visible = false;\n            self.index = -1;\n            self.selected = null;\n            self.query = null;\n        };\n        self.show = function() {\n            if (options.selectFirstMatch) {\n                self.select(0);\n            }\n            else {\n                self.selected = null;\n            }\n            self.visible = true;\n        };\n        self.load = tiUtil2.debounce(function(query, tags) {\n            self.query = query;\n\n            var promise = $q.when(loadFn({ $query: query }));\n            lastPromise = promise;\n\n            promise.then(function(items) {\n                if (promise !== lastPromise) {\n                    return;\n                }\n\n                items = tiUtil2.makeObjectArray(items.data || items, getTagId());\n                items = getDifference(items, tags);\n                self.items = items.slice(0, options.maxResultsToShow);\n\n                if (self.items.length > 0) {\n                    self.show();\n                }\n                else {\n                    self.reset();\n                }\n            });\n        }, options.debounceDelay);\n\n        self.selectNext = function() {\n            self.select(++self.index);\n        };\n        self.selectPrior = function() {\n            self.select(--self.index);\n        };\n        self.select = function(index) {\n            if (index < 0) {\n                index = self.items.length - 1;\n            }\n            else if (index >= self.items.length) {\n                index = 0;\n            }\n            self.index = index;\n            self.selected = self.items[index];\n            events.trigger('suggestion-selected', index);\n        };\n\n        self.reset();\n\n        return self;\n    }\n\n    function scrollToElement(root, index) {\n        var element = root.find('li').eq(index),\n            parent = element.parent(),\n            elementTop = element.prop('offsetTop'),\n            elementHeight = element.prop('offsetHeight'),\n            parentHeight = parent.prop('clientHeight'),\n            parentScrollTop = parent.prop('scrollTop');\n\n        if (elementTop < parentScrollTop) {\n            parent.prop('scrollTop', elementTop);\n        }\n        else if (elementTop + elementHeight > parentHeight + parentScrollTop) {\n            parent.prop('scrollTop', elementTop + elementHeight - parentHeight);\n        }\n    }\n\n    return {\n        restrict: 'E',\n        require: '^tagsInput2',\n        scope: {\n            source: '&',\n            matchClass: '&'\n        },\n        templateUrl: 'ngTagsInput2/auto-complete.html',\n        controller: [\"$scope\", \"$element\", \"$attrs\", function($scope, $element, $attrs) {\n            $scope.events = tiUtil2.simplePubSub();\n\n            tagsInput2Config2.load('autoComplete2', $scope, $attrs, {\n                template: [String, 'ngTagsInput2/auto-complete-match.html'],\n                debounceDelay: [Number, 100],\n                minLength: [Number, 3],\n                highlightMatchedText: [Boolean, true],\n                maxResultsToShow: [Number, 10],\n                loadOnDownArrow: [Boolean, false],\n                loadOnEmpty: [Boolean, false],\n                loadOnFocus: [Boolean, false],\n                selectFirstMatch: [Boolean, true],\n                displayProperty: [String, '']\n            });\n\n            $scope.suggestionList = new SuggestionList($scope.source, $scope.options, $scope.events);\n\n            this.registerautoComplete2Match = function() {\n                return {\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    getQuery: function() {\n                        return $scope.suggestionList.query;\n                    }\n                };\n            };\n        }],\n        link: function(scope, element, attrs, tagsInput2Ctrl) {\n            var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n                suggestionList = scope.suggestionList,\n                tagsInput2 = tagsInput2Ctrl.registerautoComplete2(),\n                options = scope.options,\n                events = scope.events,\n                shouldLoadSuggestions;\n\n            options.tagsInput2 = tagsInput2.getOptions();\n\n            shouldLoadSuggestions = function(value) {\n                return value && value.length >= options.minLength || !value && options.loadOnEmpty;\n            };\n\n            scope.templateScope = tagsInput2.getTemplateScope();\n\n            scope.addSuggestionByIndex = function(index) {\n                suggestionList.select(index);\n                scope.addSuggestion();\n            };\n\n            scope.addSuggestion = function() {\n                var added = false;\n\n                if (suggestionList.selected) {\n                    tagsInput2.addTag(angular.copy(suggestionList.selected));\n                    suggestionList.reset();\n                    added = true;\n                }\n                return added;\n            };\n\n            scope.track = function(item) {\n                return item[options.tagsInput2.keyProperty || options.tagsInput2.displayProperty];\n            };\n\n            scope.getSuggestionClass = function(item, index) {\n                var selected = item === suggestionList.selected;\n                return [\n                    scope.matchClass({$match: item, $index: index, $selected: selected}),\n                    { selected: selected }\n                ];\n            };\n\n            tagsInput2\n                .on('tag-added tag-removed invalid-tag input-blur', function() {\n                    suggestionList.reset();\n                })\n                .on('input-change', function(value) {\n                    if (shouldLoadSuggestions(value)) {\n                        suggestionList.load(value, tagsInput2.getTags());\n                    }\n                    else {\n                        suggestionList.reset();\n                    }\n                })\n                .on('input-focus', function() {\n                    var value = tagsInput2.getCurrentTagText();\n                    if (options.loadOnFocus && shouldLoadSuggestions(value)) {\n                        suggestionList.load(value, tagsInput2.getTags());\n                    }\n                })\n                .on('input-keydown', function(event) {\n                    var key = event.keyCode,\n                        handled = false;\n\n                    if (tiUtil2.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\n                        return;\n                    }\n\n                    if (suggestionList.visible) {\n\n                        if (key === KEYS.down) {\n                            suggestionList.selectNext();\n                            handled = true;\n                        }\n                        else if (key === KEYS.up) {\n                            suggestionList.selectPrior();\n                            handled = true;\n                        }\n                        else if (key === KEYS.escape) {\n                            suggestionList.reset();\n                            handled = true;\n                        }\n                        else if (key === KEYS.enter || key === KEYS.tab) {\n                            handled = scope.addSuggestion();\n                        }\n                    }\n                    else {\n                        if (key === KEYS.down && scope.options.loadOnDownArrow) {\n                            suggestionList.load(tagsInput2.getCurrentTagText(), tagsInput2.getTags());\n                            handled = true;\n                        }\n                    }\n\n                    if (handled) {\n                        event.preventDefault();\n                        event.stopImmediatePropagation();\n                        return false;\n                    }\n                });\n\n            events.on('suggestion-selected', function(index) {\n                scrollToElement(element, index);\n            });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiautoComplete2Match2\n * @module ngTagsInput2\n *\n * @description\n * Represents an autoComplete2 match. Used internally by the autoComplete2 directive.\n */\ntagsInput2.directive('tiautoComplete2Match2', [\"$sce\", \"tiUtil2\", function($sce, tiUtil2) {\n    return {\n        restrict: 'E',\n        require: '^autoComplete2',\n        template: '<ng-include src=\"$$template\"></ng-include>',\n        scope: {\n            $scope: '=scope',\n            data: '='\n        },\n        link: function(scope, element, attrs, autoComplete2Ctrl) {\n            var autoComplete2 = autoComplete2Ctrl.registerautoComplete2Match(),\n                options = autoComplete2.getOptions();\n\n            scope.$$template = options.template;\n            scope.$index = scope.$parent.$index;\n\n            scope.$highlight = function(text) {\n                if (options.highlightMatchedText) {\n                    text = tiUtil2.safeHighlight(text, autoComplete2.getQuery());\n                }\n                return $sce.trustAsHtml(text);\n            };\n            scope.$getDisplayText =  function() {\n                return tiUtil2.safeToString(scope.data[options.displayProperty || options.tagsInput2.displayProperty]);\n            };\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiTranscludeAppend2\n * @module ngTagsInput2\n *\n * @description\n * Re-creates the old behavior of ng-transclude. Used internally by tagsInput2 directive.\n */\ntagsInput2.directive('tiTranscludeAppend2', function() {\n    return function(scope, element, attrs, ctrl, transcludeFn) {\n        transcludeFn(function(clone) {\n            element.append(clone);\n        });\n    };\n});\n\n/**\n * @ngdoc directive\n * @name tiAutosize2\n * @module ngTagsInput2\n *\n * @description\n * Automatically sets the input's width so its content is always visible. Used internally by tagsInput2 directive.\n */\ntagsInput2.directive('tiAutosize2', [\"tagsInput2Config2\", function(tagsInput2Config2) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ctrl) {\n            var threshold = tagsInput2Config2.getTextAutosizeThreshold(),\n                span, resize;\n\n            span = angular.element('<span class=\"input\"></span>');\n            span.css('display', 'none')\n                .css('visibility', 'hidden')\n                .css('width', 'auto')\n                .css('white-space', 'pre');\n\n            element.parent().append(span);\n\n            resize = function(originalValue) {\n                var value = originalValue, width;\n\n                if (angular.isString(value) && value.length === 0) {\n                    value = attrs.placeholder;\n                }\n\n                if (value) {\n                    span.text(value);\n                    span.css('display', '');\n                    width = span.prop('offsetWidth');\n                    span.css('display', 'none');\n                }\n\n                element.css('width', width ? width + threshold + 'px' : '');\n\n                return originalValue;\n            };\n\n            ctrl.$parsers.unshift(resize);\n            ctrl.$formatters.unshift(resize);\n\n            attrs.$observe('placeholder', function(value) {\n                if (!ctrl.$modelValue) {\n                    resize(value);\n                }\n            });\n        }\n    };\n}]);\n\n/**\n * @ngdoc directive\n * @name tiBindAttrs2\n * @module ngTagsInput2\n *\n * @description\n * Binds attributes to expressions. Used internally by tagsInput2 directive.\n */\ntagsInput2.directive('tiBindAttrs2', function() {\n    return function(scope, element, attrs) {\n        scope.$watch(attrs.tiBindAttrs2, function(value) {\n            angular.forEach(value, function(value, key) {\n                attrs.$set(key, value);\n            });\n        }, true);\n    };\n});\n\n/**\n * @ngdoc service\n * @name tagsInput2Config2\n * @module ngTagsInput2\n *\n * @description\n * Sets global configuration settings for both tagsInput2 and autoComplete2 directives. It's also used internally to parse and\n *  initialize options from HTML attributes.\n */\ntagsInput2.provider('tagsInput2Config2', function() {\n    var globalDefaults = {},\n        interpolationStatus = {},\n        autosizeThreshold = 3;\n\n    /**\n     * @ngdoc method\n     * @name tagsInput2Config2#setDefaults\n     * @description Sets the default configuration option for a directive.\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput2' or 'autoComplete2'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function(directive, defaults) {\n        globalDefaults[directive] = defaults;\n        return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name tagsInput2Config2#setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput2' or 'autoComplete2'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function(directive, options) {\n        interpolationStatus[directive] = options;\n        return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name tagsInput2Config2#setTextAutosizeThreshold\n     * @description Sets the threshold used by the tagsInput2 directive to re-size the inner input field element based on its contents.\n     *\n     * @param {number} threshold Threshold value, in pixels.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setTextAutosizeThreshold = function(threshold) {\n        autosizeThreshold = threshold;\n        return this;\n    };\n\n    this.$get = [\"$interpolate\", function($interpolate) {\n        var converters = {};\n        converters[String] = function(value) { return value; };\n        converters[Number] = function(value) { return parseInt(value, 10); };\n        converters[Boolean] = function(value) { return value.toLowerCase() === 'true'; };\n        converters[RegExp] = function(value) { return new RegExp(value); };\n\n        return {\n            load: function(directive, scope, attrs, options) {\n                var defaultValidator = function() { return true; };\n\n                scope.options = {};\n\n                angular.forEach(options, function(value, key) {\n                    var type, localDefault, validator, converter, getDefault, updateValue;\n\n                    type = value[0];\n                    localDefault = value[1];\n                    validator = value[2] || defaultValidator;\n                    converter = converters[type];\n\n                    getDefault = function() {\n                        var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n                        return angular.isDefined(globalValue) ? globalValue : localDefault;\n                    };\n\n                    updateValue = function(value) {\n                        scope.options[key] = value && validator(value) ? converter(value) : getDefault();\n                    };\n\n                    if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n                        attrs.$observe(key, function(value) {\n                            updateValue(value);\n                            scope.events.trigger('option-change', { name: key, newValue: value });\n                        });\n                    }\n                    else {\n                        updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n                    }\n                });\n            },\n            getTextAutosizeThreshold: function() {\n                return autosizeThreshold;\n            }\n        };\n    }];\n});\n\n\n/***\n * @ngdoc service\n * @name tiUtil2\n * @module ngTagsInput2\n *\n * @description\n * Helper methods used internally by the directive. Should not be called directly from user code.\n */\ntagsInput2.factory('tiUtil2', [\"$timeout\", \"$q\", function($timeout, $q) {\n    var self = {};\n\n    self.debounce = function(fn, delay) {\n        var timeoutId;\n        return function() {\n            var args = arguments;\n            $timeout.cancel(timeoutId);\n            timeoutId = $timeout(function() { fn.apply(null, args); }, delay);\n        };\n    };\n\n    self.makeObjectArray = function(array, key) {\n        if (!angular.isArray(array) || array.length === 0 || angular.isObject(array[0])) {\n            return array;\n        }\n\n        var newArray = [];\n        array.forEach(function(item) {\n            var obj = {};\n            obj[key] = item;\n            newArray.push(obj);\n        });\n        return newArray;\n    };\n\n    self.findInObjectArray = function(array, obj, key, comparer) {\n        var item = null;\n        comparer = comparer || self.defaultComparer;\n\n        array.some(function(element) {\n            if (comparer(element[key], obj[key])) {\n                item = element;\n                return true;\n            }\n        });\n\n        return item;\n    };\n\n    self.defaultComparer = function(a, b) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        return self.safeToString(a).toLowerCase() === self.safeToString(b).toLowerCase();\n    };\n\n    self.safeHighlight = function(str, value) {\n        if (!value) {\n            return str;\n        }\n\n        function escapeRegexChars(str) {\n            return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n        }\n\n        str = self.encodeHTML(str);\n        value = self.encodeHTML(value);\n\n        var expression = new RegExp('&[^;]+;|' + escapeRegexChars(value), 'gi');\n        return str.replace(expression, function(match) {\n            return match.toLowerCase() === value.toLowerCase() ? '<em>' + match + '</em>' : match;\n        });\n    };\n\n    self.safeToString = function(value) {\n        return angular.isUndefined(value) || value == null ? '' : value.toString().trim();\n    };\n\n    self.encodeHTML = function(value) {\n        return self.safeToString(value)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    };\n\n    self.handleUndefinedResult = function(fn, valueIfUndefined) {\n        return function() {\n            var result = fn.apply(null, arguments);\n            return angular.isUndefined(result) ? valueIfUndefined : result;\n        };\n    };\n\n    self.replaceSpacesWithDashes = function(str) {\n        return self.safeToString(str).replace(/\\s/g, '-');\n    };\n\n    self.isModifierOn = function(event) {\n        return event.shiftKey || event.ctrlKey || event.altKey || event.metaKey;\n    };\n\n    self.promisifyValue = function(value) {\n        value = angular.isUndefined(value) ? true : value;\n        return $q[value ? 'when' : 'reject']();\n    };\n\n    self.simplePubSub = function() {\n        var events = {};\n        return {\n            on: function(names, handler, first) {\n                names.split(' ').forEach(function(name) {\n                    if (!events[name]) {\n                        events[name] = [];\n                    }\n                    var method = first ? [].unshift : [].push;\n                    method.call(events[name], handler);\n                });\n                return this;\n            },\n            trigger: function(name, args) {\n                var handlers = events[name] || [];\n                handlers.every(function(handler) {\n                    return self.handleUndefinedResult(handler, true)(args);\n                });\n                return this;\n            }\n        };\n    };\n\n    return self;\n}]);\n\n/* HTML templates */\ntagsInput2.run([\"$templateCache\", function($templateCache) {\n    $templateCache.put('ngTagsInput2/tags-input2.html',\n    \"<div class=\\\"host\\\" tabindex=\\\"-1\\\" ng-click=\\\"eventHandlers.host.click()\\\" ti-transclude-append2><div class=\\\"tags\\\" ng-class=\\\"{focused: hasFocus}\\\"><ul class=\\\"tag-list\\\"><li class=\\\"tag-item\\\" ng-repeat=\\\"tag in tagList.items track by track(tag)\\\" ng-class=\\\"getTagClass(tag, $index)\\\" ng-click=\\\"eventHandlers.tag.click(tag)\\\"><ti-tag-item2 scope=\\\"templateScope\\\" data=\\\"::tag\\\"></ti-tag-item2></li></ul><input class=\\\"input\\\" autoComplete2=\\\"off\\\" ng-model=\\\"newTag.text\\\" ng-model-options=\\\"{getterSetter: true}\\\" ng-keydown=\\\"eventHandlers.input.keydown($event)\\\" ng-focus=\\\"eventHandlers.input.focus($event)\\\" ng-virtual-keyboard=\\\"{relative: false, size: 4, sizeAdj: false, customClass: 'totemKeyboard', kt: 'ptBr', i18n: {'00': 'Exibir teclado numérico', '01': 'Exibir teclado virtual', '02': 'Selecionar layout do teclado', '03': 'Teclas mortas', '04': 'Ligado', '05': 'Desligado', '06': 'Fechar teclado', '07': 'Limpar', '08': 'Limpar campo', '09': 'Versão', '10': 'Diminuir tamanho do teclado', '11': 'Aumentar tamanho do teclado'} }\\\" ng-blur=\\\"eventHandlers.input.blur($event)\\\" ng-paste=\\\"eventHandlers.input.paste($event)\\\" ng-trim=\\\"false\\\" ng-class=\\\"{'invalid-tag': newTag.invalid}\\\" ng-disabled=\\\"disabled\\\" ti-bind-attrs2=\\\"{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}\\\" ti-autosize2></div></div>\"\n  );\n\n  $templateCache.put('ngTagsInput2/tag-item.html',\n    \"<span ng-bind=\\\"$getDisplayText()\\\"></span> <a class=\\\"remove-button\\\" ng-click=\\\"$removeTag()\\\" ng-bind=\\\"::$$removeTagSymbol\\\"></a>\"\n  );\n\n  $templateCache.put('ngTagsInput2/auto-complete.html',\n    \"<div class=\\\"autoComplete\\\" ng-if=\\\"suggestionList.visible\\\"><ul class=\\\"suggestion-list\\\"><li class=\\\"suggestion-item\\\" ng-repeat=\\\"item in suggestionList.items track by track(item)\\\" ng-class=\\\"getSuggestionClass(item, $index)\\\" ng-click=\\\"addSuggestionByIndex($index)\\\" ng-mouseenter=\\\"suggestionList.select($index)\\\"><ti-autoComplete2-match scope=\\\"templateScope\\\" data=\\\"::item\\\"></ti-autoComplete2-match></li></ul></div>\"\n  );\n\n  $templateCache.put('ngTagsInput2/auto-complete-match.html',\n    \"<span ng-bind-html=\\\"$highlight($getDisplayText())\\\"></span>\"\n  );\n}]);\n\n}());","(function() {\n    'use strict';\n\n    angular.module('les-confirm').service('confirmService', function($confirm, $translate) {\n\n        var defaultConfiguration = {\n            title: 'global.confirm',\n            ok: 'global.yes',\n            cancel: 'global.no'\n        };\n\n        function confirm(confirmConfiguration) {\n           var config = {\n                text: $translate.instant(confirmConfiguration.text || defaultConfiguration.text, translateParameters(confirmConfiguration.parameters)),\n                title: $translate.instant(confirmConfiguration.title || defaultConfiguration.title),\n                ok: $translate.instant(confirmConfiguration.ok || defaultConfiguration.ok),\n                cancel: $translate.instant(confirmConfiguration.cancel || defaultConfiguration.cancel),\n                breakLine : confirmConfiguration.breakLine || false\n           };\n\n           return $confirm(config, config.breakLine ? {windowClass : 'modal-break-line'} : undefined);\n        }\n        \n        function translateParameters(parameters) {\n            if (parameters) {\n                for(var parameter in parameters) {\n                    parameters[parameter] = $translate.instant(parameters[parameter]);\n                }\n            }\n\n            return parameters;\n        }\n\n        return {\n            confirm: confirm\n        };\n    });\n\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-dynamic-height').directive('dynamicHeight', dynamicHeight);\n\tfunction dynamicHeight() {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t    link: function(scope, element, attrs) {\n\t\t\t\tvar deltaY = scope.$eval(attrs.dynamicHeight) || 199;\n\t\t    \telement.css('max-height', element[0].offsetHeight + deltaY + 'px');\n\t\t    }\n\t\t};\n\t}\n\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-filters').filter('filterByI18n', function($translate) {\n        return function(items, search, key) {\n            var filtered = [];\n\n            if(!search) {\n                return items;\n            }\n\n            items.map(function(item) {\n                var text = $translate.instant(item[key]);\n\n                if(text) {\n                    if(text.toLowerCase().includes(search.toLowerCase())) {\n                        filtered.push(item);\n                    }\n                }\n            });\n\n            return filtered;\n        };\n    });\n\n})();\n","(function() {\n\t'use strict';\n\n\tangular.module('les-focus').directive('ngAutofocus', ngAutofocus);\n\n\tngAutofocus.$inject = ['$timeout'];\n\n\tfunction ngAutofocus($timeout) {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tscope: {\n\t\t\t\t'ngAutofocus': '=?'\n\t\t\t},\n\t\t    link: function($scope, $element) {\n\t\t    \t$scope.$watch('ngAutofocus', function(value) {\n\t               if (value || angular.isUndefined(value)) {\n\t               \t\t$timeout(function() {\n\t\t        \t\t\t$element[0].focus();\n\t\t     \t\t\t}, 100);\n\t\t     \t\t}\n\t            });\n\t\t    }\n\t\t};\n\t}\n\n})();\n","(function() {\n\t'use strict';\n\n\tangular.module('les-focus').directive('focusOn', focusOn);\n\n\tfocusOn.$inject = ['$timeout'];\n\n\tfunction focusOn($timeout) {\n\t\treturn {\n\t        restrict : 'A',\n\t        link : function($scope,$element,$attr) {\n\t            $scope.$watch($attr.focusOn,function(_focusVal) {\n\t                $timeout(function() {\n\t                    if(_focusVal) {\n\t                    \t$element.focus();\n\t                    } else {\n\t                    \t$element.blur();\n\t                    }\n\t                });\n\t            });\n\t        }\n\t\t};\n\t}\n\n})();","(function() {\n\t'use strict';\n\n\tangular.module('les-key-press').directive('onEnterPress', bindEnterPressEvent);\n\n\tfunction bindEnterPressEvent() {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t    link: function(scope, element, attrs) {\n\t\t\t\telement.bind('keypress', function(event) {\n\t\t\t\t\tif (event.which === 13) {\n\t\t\t\t\t\tscope.$apply(function() {\n\t\t\t\t\t\t\tscope.$eval(attrs.onEnterPress);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// event.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t    }\n\t\t};\n\t}\n})();\n","(function() {\n\t'use strict';\n\n\tangular.module('les-key-press').directive('onTabPress', bindTabPressEvent);\n\n\tfunction bindTabPressEvent() {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t    link: function(scope, element, attrs) {\n\t\t\t\telement.bind('keydown', function(event) {\n\t\t\t\t\tif (event.which === 9) {\n\t\t\t\t\t\tscope.$apply(function() {\n\t\t\t\t\t\t\tscope.$eval(attrs.onTabPress);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t    }\n\t\t};\n\t}\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-handlers').factory('errorHttpInterceptor', errorHttpInterceptor);\n\n    errorHttpInterceptor.$inject = ['$q', 'notificationService', 'blockUI'];\n\n    function errorHttpInterceptor($q, notificationService, blockUI) {\n        return {\n            responseError: function responseError(rejection) {\n                console.log(rejection);\n\n                if (rejection.data) {\n                    if (rejection.status >= 500 && rejection.status <= 599) {\n                        if (rejection.data.errors) {\n                            notificationService.errorWithParams(rejection.data);\n                        } else {\n                            notificationService.error({\n                                text: 'error.server.error'\n                            });\n                        }\n                    } else if (rejection.status !== 401) {\n                        if (rejection.data.errors) {\n                            notificationService.warningWithParams(rejection.data);\n                        } else {\n                            notificationService.warning({\n                                text: 'error.generic.error'\n                            });\n                        }\n                    }\n                }\n\n                blockUI.stop();\n\n                return $q.reject(rejection);\n            }\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-handlers').factory('langHttpInterceptor', langHttpInterceptor);\n\n    langHttpInterceptor.$inject = ['localeService'];\n\n    function langHttpInterceptor(localeService) {\n        return {\n            request: function(config) {\n                config.headers.language = localeService.getCurrentLanguageType();\n                return config;\n            }\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-locale').service('availableLanguagesService', availableLanguagesService);\n\n    availableLanguagesService.$inject = [];\n\n    function availableLanguagesService() {\n        return [\n            {\n                code: 'en',\n                value: 'EN_US',\n                displayName: 'English'\n            },\n            {\n                code: 'pt-br',\n                value: 'PT_BR',\n                displayName: 'Português'\n            }\n        ];\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-locale').service('localeService', localeService);\n\n    localeService.$inject = ['localStorageService', 'availableLanguagesService', '$translate', 'tmhDynamicLocale'];\n\n    function localeService(localStorageService, availableLanguagesService, $translate, tmhDynamicLocale) {\n        var localeService = {\n            changeLocale: changeLocale,\n            removeLocale: removeLocale,\n            getCurrentLocale: getCurrentLocale,\n            getCurrentLanguageType: getCurrentLanguageType\n        };\n\n        var localeKey = 'CURRENT_LOCALE';\n\n        function changeLocale(newLocale) {\n            $translate.use(newLocale);\n            tmhDynamicLocale.set(newLocale);\n        }\n\n        function removeLocale() {\n            return localStorageService.remove(localeKey);\n        }\n\n        function getCurrentLocale() {\n            return localStorageService.get(localeKey);\n        }\n\n        function getCurrentLanguageType() {\n            var currentLocale = getCurrentLocale();\n            var currentLanguage = availableLanguagesService.find(function(lang) {\n                return lang.code === currentLocale;\n            });\n\n            if (currentLanguage) {\n                return currentLanguage.value;\n            }\n\n            return;\n        }\n\n        return localeService;\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-location').factory('locationCountryService', locationCountryService);\n\n    locationCountryService.$inject = [\n        '$http'\n    ];\n\n    function locationCountryService(\n        $http\n    ) {\n\n        var url = 'rest/configuration/countries';\n\n        var locationCountryService = {\n            getCountries: getCountries,\n            getCountryByCode: getCountryByCode\n        };\n\n        function getCountries() {\n            return $http({\n                method: 'GET',\n                url: url\n            }).then(function successCallback(response) {\n                if (response.data && response.data.content) {\n                    response.data = response.data.content;\n                }\n                return response;\n            });\n        }\n\n        function getCountryByCode(code) {\n            return $http({\n                method: 'GET',\n                url: url + '/' + code\n            }).then(function successCallback(response) {\n                return response;\n            });\n        }\n\n        return locationCountryService;\n    }\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-location').factory('locationEstateService', locationEstateService);\n\n    locationEstateService.$inject = [\n        '$http'\n    ];\n\n    function locationEstateService(\n        $http\n    ) {\n        var url = 'rest/configuration/states';\n\n        var locationEstateService = {\n            getStateById: getStateById,\n            getEstates: getEstates\n        };\n\n        function getStateById(id) {\n            return $http({\n                method: 'GET',\n                url: url + '/' + id\n            }).then(function successCallback(response) {\n                return response.data;\n            });\n        }\n\n        function getEstates(countryIsoCode3) {\n            return $http({\n                method: 'GET',\n                url: url,\n                params: {\n                    countryIsoCode3: countryIsoCode3\n                }\n            }).then(function successCallback(response) {\n                if (response.data && response.data.content) {\n                    return response.data.content;\n                }\n                return response;\n            });\n        }\n\n        return locationEstateService;\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-notification-dialog').factory('notificationService', function(growl, $translate, $transitions) {\n        var growlConfiguration = {\n            disableIcons: false,\n            disableCountDown: true\n        };\n\n        var growlMessages = [];\n\n        function getMessageDuration(message) {\n            var words = $translate.instant(message).split(' ');\n            var msPerWord = 500;\n            var duration = 0;\n            var minDuration = 3000;\n\n            if (words.length) {\n                duration = words.length * msPerWord;\n            }\n\n            duration = duration < minDuration ? minDuration : duration;\n\n            return duration;\n        }\n\n        function error(message, hasTtl, keepOnRouteChange) {\n            var error = growl.error(\n                message.text,\n                angular.merge(\n                    {\n                        title: message.title,\n                        variables: translateParameters(message.parameters),\n                        ttl: hasTtl ? getMessageDuration(message.text) : 0\n                    },\n                    growlConfiguration\n                )\n            );\n\n            if (!keepOnRouteChange) {\n                growlMessages.push(error);\n            }\n\n            return error;\n        }\n\n        function success(message) {\n            var success = growl.success(\n                message.text,\n                angular.merge(\n                    {\n                        title: message.title,\n                        variables: translateParameters(message.parameters),\n                        ttl: getMessageDuration(message.text)\n                    },\n                    growlConfiguration\n                )\n            );\n\n            return success;\n        }\n\n        function info(message) {\n            var info = growl.info(\n                message.text,\n                angular.merge(\n                    {\n                        title: message.title,\n                        variables: translateParameters(message.parameters),\n                        ttl: getMessageDuration(message.text)\n                    },\n                    growlConfiguration\n                )\n            );\n\n            return info;\n        }\n\n        function warning(message) {\n            var warning = growl.warning(\n                message.text,\n                angular.merge(\n                    {\n                        title: message.title,\n                        variables: translateParameters(message.parameters)\n                    },\n                    growlConfiguration\n                )\n            );\n\n            growlMessages.push(warning);\n\n            return warning;\n        }\n\n        function translateParameters(parameters) {\n            if (parameters) {\n                for (var parameter in parameters) {\n                    parameters[parameter] = $translate.instant(parameters[parameter]);\n                }\n            }\n\n            return parameters;\n        }\n\n        function errorWithParams(params) {\n            //if(params.errorHeader) {\n            //var text = prepareNotificaitonWithHeader(params);\n\n            //error({text: text});\n            //} else {\n            params.errors.forEach(function(errorItem) {\n                error({ text: errorItem.key, title: errorItem.title, parameters: errorItem.parameters }, false, true);\n            });\n            //}\n        }\n\n        function warningWithParams(params) {\n            //if(params.errorHeader) {\n            //var text = prepareNotificaitonWithHeader(params);\n\n            //warning({text: text});\n            //} else {\n            params.errors.forEach(function(errorItem) {\n                warning({ text: errorItem.key, title: errorItem.title, parameters: errorItem.parameters });\n            });\n            //}\n        }\n\n        //\tfunction prepareNotificaitonWithHeader(params) {\n        //\t\tvar text = '<div class=\\'break-words\\'>';\n        //\t\ttext += '<strong>' + $translate.instant(params.errorHeader) + '</strong>';\n        //\t\ttext += '<br><ul>';\n        //\n        //\t\tparams.errors.forEach(function(error) {\n        //\t\t\tvar parameters = translateParameters(error.parameters);\n        //\t\t\ttext += '<li>' + $translate.instant(error.key, parameters) + '</li>';\n        //\t\t});\n        //\n        //\t\ttext += '</ul></div>';\n        //\n        //\t\treturn text;\n        //\t}\n\n        function clearErrorsOnChangeRoute() {\n            $transitions.onSuccess({}, function() {\n                if (growlMessages.length) {\n                    growlMessages.map(function(message) {\n                        if (message) {\n                            message.destroy();\n                        }\n                    });\n                }\n            });\n        }\n\n        clearErrorsOnChangeRoute();\n\n        return {\n            error: error,\n            success: success,\n            info: info,\n            warning: warning,\n            errorWithParams: errorWithParams,\n            warningWithParams: warningWithParams,\n            translateParameters: translateParameters\n        };\n    });\n})();\n","(function() {\n\t'use strict';\n\n\tangular.module('les-short-name').filter('shortName', shortName);\n\n\tfunction shortName() {\n\t\treturn function(longName) {\n\t\t\tif (typeof(longName) !== 'string') {\n\t\t\t\treturn longName;\n\t\t\t}\n\n\t\t\tvar names = longName.split(' ') || [];\n\t\t\tif (names.length === 0) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tvar firstName = names.shift() || '';\n\t\t\tvar lastName = names.pop() || '';\n\t\t\tif (lastName.length === 0) {\n\t\t\t\treturn firstName;\n\t\t\t}\n\n\t\t\treturn firstName + ' ' + lastName;\n\t\t};\n\t}\n\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-user').factory('userContextService', userContextService);\n\n    userContextService.$inject = ['localStorageService'];\n\n    function userContextService(localStorageService) {\n        var userContextService = {\n            getCurrentDock: getCurrentDock,\n            updateCurrentDock: updateCurrentDock\n        };\n\n        function getCurrentDock() {\n            if (!localStorageService.get('CURRENT_DOCK')) {\n                updateCurrentDock();\n            }\n\n            return localStorageService.get('CURRENT_DOCK');\n        }\n\n        function updateCurrentDock(dock) {\n            localStorageService.set('CURRENT_DOCK', dock);\n        }\n        return userContextService;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-validation').factory('lesElementModifier', LesElementModifierFn);\n\n    LesElementModifierFn.$inject = ['$log', 'notificationService'];\n\n    function LesElementModifierFn($log, notificationService) {\n        var reset = function(el) {\n                el.removeClass('has-success has-error has-feedback');\n            },\n            findWithClassElementAsc = function(el, klass) {\n                var returnEl,\n                    parent = el;\n                for (var i = 0; i <= 10; i += 1) {\n                    if (parent !== undefined && parent.hasClass(klass)) {\n                        returnEl = parent;\n                        break;\n                    } else if (parent !== undefined) {\n                        parent = parent.parent();\n                    }\n                }\n\n                return returnEl;\n            },\n            findWithClassElementDesc = function(el, klass) {\n                var child;\n                for (var i = 0; i < el.children.length; i += 1) {\n                    child = el.children[i];\n                    if (child !== undefined && angular.element(child).hasClass(klass)) {\n                        break;\n                    } else if (child.children !== undefined) {\n                        child = findWithClassElementDesc(child, klass);\n                        if (child.length > 0) {\n                            break;\n                        }\n                    }\n                }\n\n                return angular.element(child);\n            },\n            findFormGroupElement = function(el) {\n                return findWithClassElementAsc(el, 'form-group');\n            },\n            logInvalidStructure = function() {\n                $log.error(\n                    'Angular-auto-validate: invalid bs form structure elements must be wrapped by a form-group class'\n                );\n            },\n            makeInvalid = function(el, errorMsg) {\n                var frmGroupEl = findFormGroupElement(el);\n\n                if (frmGroupEl) {\n                    reset(frmGroupEl);\n                    frmGroupEl.addClass('has-error');\n\n                    if (errorMsg) {\n                        notificationService.error(\n                            {\n                                text: errorMsg\n                            },\n                            true\n                        );\n                    }\n                } else {\n                    logInvalidStructure();\n                }\n            },\n            makeDefault = function(el) {\n                var frmGroupEl = findFormGroupElement(el);\n                if (frmGroupEl) {\n                    reset(frmGroupEl);\n                } else {\n                    logInvalidStructure();\n                }\n            },\n            waitForAsyncValidators = function(el) {\n                var frmGroupEl = findFormGroupElement(el);\n\n                if (frmGroupEl) {\n                    reset(frmGroupEl);\n                    frmGroupEl.addClass('has-feedback');\n                } else {\n                    logInvalidStructure();\n                }\n            };\n\n        return {\n            makeInvalid: makeInvalid,\n            makeDefault: makeDefault,\n            waitForAsyncValidators: waitForAsyncValidators,\n            key: 'lesbs'\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-validation').factory('lesErrorMessageResolver', lesErrorMessageResolver);\n\n    lesErrorMessageResolver.$inject = [\n        '$q',\n        'lesElementModifier',\n        '$translate'\n    ];\n\n    function lesErrorMessageResolver(\n        $q,\n        lesElementModifier,\n        $translate) {\n\n        function formatString(string, params) {\n            return string.replace(/{(\\d+)}/g, function (match, number) {\n                return typeof params[number] !== undefined ? params[number] : match;\n            });\n        }\n\n        function convertToTrainCase(str) {\n            return str.replace(/(?:^|\\.?)([A-Z])/g, function (x, y){\n                return '-' + y.toLowerCase();\n            }).replace(/^-/, '');\n        }\n\n        function getParameters(errorType, el) {\n            var parameters = [];\n\n            if (el && el.attr) {\n                try {\n                    var parameter = el.attr('ng-' + errorType);\n                    if (parameter === undefined) {\n                        var type = convertToTrainCase(errorType);\n                        parameter = el.attr(type);\n                    }\n\n                    parameters.push(parameter || '');\n                } catch (e) {}\n            }\n\n            return parameters;\n        }\n\n        // Foca components como ng-tags-input e chosen\n        function focusCustomComponents(el) {\n            if(!el.context) {\n                return;\n            }\n            \n            var form = el.context.form;\n\n            if(!form) {\n                return;\n            }\n\n            for (var i = 0; i < form.length; i++) {\n                var input = angular.element(form[i]);\n                var group = $(input).closest('.form-group');\n                \n                if(input.is(':visible') && group.hasClass('has-error')) {\n\n                    // ngTagsInput\n                    if(el[0].type === 'hidden') {\n                        input.focus();\n                    }\n                    \n                    // chosen\n                    if(el[0].type === 'select-one') {\n                        $(input).trigger('chosen:open');\n                    }\n\n                    // ui-select\n                    // todo\n\n                    break;\n                }\n            }\n        }\n\n        function getMessageTypeOverride(errorType, el) {\n            var overrideKey;\n\n            if (el) {\n                errorType += '-err-type';\n                overrideKey = el.attr('ng-' + errorType);\n\n                if (overrideKey === undefined) {\n                    overrideKey = el.attr('data-ng-' + errorType) || el.attr(errorType);\n                }\n\n                if (overrideKey) {\n                    overrideKey = overrideKey.replace(/[\\W]/g, '');\n                }\n            }\n\n            return overrideKey;\n        }\n\n        var resolve = function (errorType, el) {\n            var defer = $q.defer();\n            var messageTypeOverride = getMessageTypeOverride(errorType, el);\n            var error = messageTypeOverride || errorType;\n\n            $translate('error.' + error).then(function(errorMessage) {\n                var params = getParameters(errorType, el);\n                var messageFormated = formatString(errorMessage, params);\n                lesElementModifier.makeInvalid(el, messageFormated);\n\n                focusCustomComponents(el);\n\n            }, function() {\n                lesElementModifier.makeInvalid(el, 'Chave de tradução do erro não encontrada: ' + errorType);\n            });\n\n            return defer.promise;\n        };\n\n        return {\n            resolve: resolve\n        };\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-validation').config(function ($provide) {\n\n        $provide.decorator('ngModelDirective', function($delegate) {\n            var directive = $delegate[0],\n                shouldSetBlurUpdateEvent = function (element) {\n                    var nodeName = element.nodeName, \n                        inputType =  element.type,\n                        isDatePicker = element.getAttribute('uib-datepicker-popup');\n                        \n                    // The blur event is only really applicable to input controls so\n                    // we want to stick with the default events for selects, checkboxes & radio buttons\n                    return nodeName.toLowerCase() === 'textarea' ||\n                        (nodeName.toLowerCase() === 'input' && \n                         inputType.toLowerCase() !== 'checkbox' && \n                         inputType.toLowerCase() !== 'radio' &&\n                         inputType.toLowerCase() !== 'search') &&\n                        !isDatePicker;\n                    };\n\n            // save a reference to the original compile function\n            var compileFn = directive.compile;\n\n            directive.compile = function () {   \n\n                var link = compileFn.apply(this, arguments);\n\n                return {\n                    pre: function ngModelPostLink(scope, element, attr, ctrls) {\n\n                        if(!ctrls[2]) {\n                            ctrls[2] = {};\n                        }\n\n                        var ngModelOptions = ctrls[2];\n\n                        if (ngModelOptions.$options === undefined && shouldSetBlurUpdateEvent(element[0])) {\n                            ngModelOptions.$options = {\n                                updateOn: 'blur',\n                                updateOnDefault: false\n                            };\n                        }\n\n                        link.pre.apply(this, arguments);\n                    },\n                    post: link.post\n                };\n            };\n\n            return $delegate;\n        });\n    });\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-validation').directive('lesSubmit', function() {\n        return {\n            link: function(scope, element, attributes) {\n                element.bind('click', function() {\n                    var form = angular.element(document.querySelector('[name=\"' + attributes.lesSubmit + '\"]'));\n                    form.triggerHandler('submit');\n                });\n            }\n        };\n    });\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-validation').directive('lesAlphanumericValidator', function () {\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            link: function (scope, element, attrs, ctrl) {\n                ctrl.$validators.lesAlphanumericValidator = function (modelValue, viewValue) {\n                    var alphanumericRegex = /^([A-Z0-9a-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]+)$/;\n                    return alphanumericRegex.test(viewValue);\n                };\n\n            }\n        };\n    });\n\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-validation').directive('lesEqualsValidator', function() {\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            link: function(scope, element, attrs, ctrl) {\n                var modelToMatch = element.attr('les-equals-validator');      \n                ctrl.$validators.lesEqualsValidator = function(modelValue, viewValue) {\n                    return viewValue === scope.$eval(modelToMatch);\n                };\n            }\n        };\n    });\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-validation').directive('lesMinLengthValidator', function () {\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            link: function (scope, element, attrs, ctrl) {\n                var minLengh;\n\n                scope.$watch(function () { return ctrl.$modelValue && ctrl.$modelValue.length; }, function () {\n                    ctrl.$validate();\n                });\n\n                scope.$watch(function () { return element.attr('les-min-length-validator'); }, function (value) {\n                    minLengh = (value !== 'false') ? (parseInt(value) || 1) : false;\n                    ctrl.$setValidity('lesMinLengthValidator', ctrl.$validators.lesMinLengthValidator());\n                });\n\n                ctrl.$validators.lesMinLengthValidator = function () {\n                    if (minLengh === false) { return true; }\n                    var arr = ctrl.$modelValue;\n                    if (!arr) { return false; }\n                    return arr.length > (minLengh - 1);\n                };\n            }\n        };\n    });\n\n    angular.module('les-validation').directive('lesEqualsLengthValidator', function () {\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            link: function (scope, element, attrs, ctrl) {\n                var length;\n\n                scope.$watch(function () { return ctrl.$modelValue && ctrl.$modelValue.length; }, function () {\n                    ctrl.$validate();\n                });\n\n                scope.$watch(function () { return element.attr('les-equals-length-validator'); }, function (value) {\n                    length = (value !== 'false') ? (parseInt(value) || 1) : false;\n                    ctrl.$setValidity('lesEqualsLengthValidator', ctrl.$validators.lesEqualsLengthValidator());\n                });\n\n                ctrl.$validators.lesEqualsLengthValidator = function () {\n                    if (length === false) { return true; }\n                    var arr = ctrl.$modelValue;\n                    if (!arr) { return false; }\n                    return arr.length === length;\n                };\n            }\n        };\n    });\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-validation').directive('lesStringTimeValidator', function () {\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            link: function (scope, element, attrs, ctrl) {\n                var stringTimeRegex = /^([0-9]+d)? ?([0-9]+h)? ?([0-9]+m)?$/;\n                ctrl.$validators.lesStringTimeValidator = function (modelValue) {\n                    return stringTimeRegex.test(modelValue);\n                };\n            }\n        };\n    });\n\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-footer').directive('publicFooter', function(lesCommonsWebService) {\n\t    return {\n\t        restrict: 'E',\t        \n\t        templateUrl: lesCommonsWebService.base + 'partials/footer/footer-public.html',\n            controller: function($scope) {\n                $scope.year = new Date().getFullYear();\n            } \n\t    };\n\t});\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-footer').directive('totemFooter', function(lesCommonsWebService) {\n\t    return {\n\t        restrict: 'E',\t        \n\t        templateUrl: lesCommonsWebService.base + 'partials/footer/footer-totem.html',\n            controller: function($scope) {\n                $scope.year = new Date().getFullYear();\n            } \n\t    };\n\t});\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-footer').directive('footer', function(lesCommonsWebService) {\n\t    return {\n\t        restrict: 'E',\t        \n\t        templateUrl: lesCommonsWebService.base + 'partials/footer/footer.html'\n\t    };\n\t});\n})();\n","(function() {\n    'use strict';\n    angular.module('les-header').directive('publicHeader', function(lesCommonsWebService) {\n        return {\n            restrict: 'E',\n            templateUrl: lesCommonsWebService.base + 'partials/header/header-public.html',\n            scope: {\n                initial: '@'\n            },\n            controller: function($scope, headerModel) {\n                $scope.model = headerModel;\n            }\n        };\n    });\n})();\n","(function() {\n\t'use strict';\n\tangular.module('les-header').directive('totemHeader', function(lesCommonsWebService) {\n\t    return {\n\t        restrict: 'E',\t        \n\t        templateUrl: lesCommonsWebService.base + 'partials/header/header-totem.html'\n\t    };\n\t});\n})();\n","(function () {\n    'use strict';\n\n    angular.module('click-overlay').directive('clickOverlay', function (lesCommonsWebService) {\n        return {\n            restrict: 'E',\n            transclude: true,\n            scope: {\n                visible: '='\n            },\n            templateUrl: lesCommonsWebService.base + 'components/click-overlay/click-overlay.html',\n            controller: function ($scope) {\n                $scope.close = function () {\n                    $scope.visible = false;\n                };\n            }\n        };\n    });\n})();\n","(function() {\n    'use strict';\n\n    angular.module('language-select').controller('languageSelectController', languageSelectController);\n\n    languageSelectController.$inject = ['$state', 'localeService', 'availableLanguagesService'];\n\n    function languageSelectController($state, localeService, availableLanguagesService) {\n        var self = this;\n        self.changeLanguage = changeLanguage;\n\n        activate();\n\n        function activate() {\n            self.availableLanguages = availableLanguagesService;\n            self.currentLang = self.availableLanguages.find(function(lang) {\n                return lang.code === localeService.getCurrentLocale();\n            });\n        }\n\n        function changeLanguage(language) {\n            localeService.changeLocale(language.code);\n            $state.reload();\n        }\n    }\n})();\n","(function() {\n\t'use strict';\n\n\n\tangular.module('language-select').directive('languageSelect', function(lesCommonsWebService) {\n\t    return {\n\t        restrict: 'E',\n\t        templateUrl: lesCommonsWebService.base + 'components/language-select/language-select.html',\n\t\t\tcontroller: 'languageSelectController',\n\t\t\tcontrollerAs: 'languageSelectCtrl',\n\t\t\tbindToController: true\n\t    };\n\t});\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-commands').directive('commands', function(lesCommonsWebService) {\n        var rootElement;\n\n        return {\n            scope : {},\n            templateUrl : lesCommonsWebService.base + 'components/les-commands/les.commands.html',\n            link: function(scope, element) {\n                rootElement = angular.element(element);\n            },\n            controller: function($scope, hotkeys, $timeout, $filter, CommandsService) {\n                var model = $scope.model = CommandsService;\n                $scope.toggle = toggle;\n                $scope.hide = hide;\n                $scope.translate = translate;\n\n                hotkeys.add({\n                    combo: 'alt+a',\n                    allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],\n                    description: 'Abrir terminal de comandos',\n                    callback: toggle\n                });\n\n                hotkeys.add({\n                    combo: 'esc',\n                    allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],\n                    description: 'Fechar terminal de comandos',\n                    callback: hide\n                });\n\n                function translate(key) {\n                    return $filter('translate')(key);\n                }\n\n                function hide() {\n                    if(model.visible) {\n                        toggle();\n                    }\n                }\n \n                function toggle() {\n                    model.toggle();\n\n                    if(model.visible) {\n                        $timeout(function() {\n                            var select = angular.element(rootElement).find('select');\n                            $(select).chosen().trigger('chosen:open');\n                        }, 100);\n                    }\n                }\n            }\n        };\n    });\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-commands').service('CommandsService', function ($state) {\n\n        var service = {\n            command: undefined,\n            commands: [],\n            visible: false\n        };\n        var id = 0;\n\n        service.commands = [\n            // SH - SHIPMENT\n            {\n                id: id++,\n                code: 'SH01',\n                name: 'commands.command.shipment.panel',\n                state: 'shipment.panel'\n            },\n            {\n                id: id++,\n                code: 'SH02',\n                name: 'commands.command.shipment.management',\n                state: 'shipment.management'\n            },\n            {\n                id: id++,\n                code: 'SH03',\n                name: 'commands.command.shipment.unload',\n                state: 'shipment.shipment-unload'\n            },\n            {\n                id: id++,\n                code: 'SH04',\n                name: 'commands.command.shipment.load',\n                state: 'shipment.shipment-load'\n            },\n            {\n                id: id++,\n                code: 'SH05',\n                name: 'commands.command.shipment.list',\n                state: 'shipment.packing-list'\n            },\n            {\n                id: id++,\n                code: 'SH06',\n                name: 'commands.command.shipment.report',\n                state: 'shipment.report-process'\n            },\n\n            // DO - DOCUMENT\n            {\n                id: id++,\n                code: 'DO01',\n                name: 'commands.command.reference.document.manual',\n                state: 'business-process.manual-document'\n            },\n\n            // CA - CALENDAR\n            {\n                id: id++,\n                code: 'CA01',\n                name: 'commands.command.calendar',\n                state: 'scheduling.calendar'\n            },\n\n            // DA - DANFE\n            {\n                id: id++,\n                code: 'DA01',\n                name: 'commands.command.danfe.rejection',\n                state: 'business-process.danfe.rejection'\n            },\n\n            // VO - VOLUME \n            {\n                id: id++,\n                code: 'VO01',\n                name: 'commands.command.inspection.volume',\n                state: 'goods-receipt.volume'\n            },\n            {\n                id: id++,\n                code: 'VO02',\n                name: 'commands.command.inspection.volume.by.code',\n                state: 'goods-receipt.volume.inspection.byCode'\n            },\n            {\n                id: id++,\n                code: 'VO03',\n                name: 'commands.command.inspection.volume.by.bin',\n                state: 'goods-receipt.volume.inspection.byBin'\n            },\n            {\n                id: id++,\n                code: 'VO04',\n                name: 'commands.command.inspection.volume.change.bin',\n                state: 'goods-receipt.volume.changeBin'\n            },\n\n            // MA -MATERIAL\n            {\n                id: id++,\n                code: 'MA01',\n                name: 'commands.command.inspection.material.list',\n                state: 'goods-receipt.material.inspection.list'\n            },\n\n            {\n                id: id++,\n                code: 'MA02',\n                name: 'commands.command.inspection.material.management',\n                state: 'goods-receipt.material'\n            },\n\n            // SE - SERVICE\n            {\n                id: id++,\n                code: 'SE01',\n                name: 'commands.command.service.request.management',\n                state: 'pickup-portal.service-request.search'\n            },\n            {\n                id: id++,\n                code: 'SE02',\n                name: 'commands.command.service.request.new',\n                state: 'pickup-portal.service-request.register.identification'\n            },\n            {\n                id: id++,\n                code: 'SE03',\n                name: 'commands.command.service.executions',\n                state: 'pickup-portal.executions.search'\n            },\n\n            // OP - OPERATION\n            {\n                id: id++,\n                code: 'OP01',\n                name: 'commands.command.operation.suplier.management',\n                state: 'business-process.supplier'\n            },\n            {\n                id: id++,\n                code: 'OP02',\n                name: 'commands.command.operation.suplier.new',\n                state: 'business-process.supplier.register'\n            },\n            {\n                id: id++,\n                code: 'OP03',\n                name: 'commands.command.operation.service.management',\n                state: 'pickup-portal.service'\n            },\n            {\n                id: id++,\n                code: 'OP04',\n                name: 'commands.command.operation.service.new',\n                state: 'pickup-portal.service.register'\n            },\n            {\n                id: id++,\n                code: 'OP05',\n                name: 'commands.command.operation.contract.management',\n                state: 'pickup-portal.contract'\n            },\n            {\n                id: id++,\n                code: 'OP06',\n                name: 'commands.command.operation.contract.new',\n                state: 'pickup-portal.contract.register'\n            },\n            {\n                id: id++,\n                code: 'OP07',\n                name: 'commands.command.operation.material.type.management',\n                state: 'system.materialType'\n            },\n            {\n                id: id++,\n                code: 'OP08',\n                name: 'commands.command.operation.material.type.new',\n                state: 'system.materialType.register'\n            },\n            {\n                id: id++,\n                code: 'OP09',\n                name: 'commands.command.operation.packing.type.management',\n                state: 'system.packingType'\n            },\n            {\n                id: id++,\n                code: 'OP10',\n                name: 'commands.command.operation.packing.type.new',\n                state: 'system.packingType.register'\n            },\n            {\n                id: id++,\n                code: 'OP11',\n                name: 'commands.command.operation.vehicle-type.management',\n                state: 'system.vehicleType'\n            },\n            {\n                id: id++,\n                code: 'OP12',\n                name: 'commands.command.operation.vehicle-type.new',\n                state: 'system.vehicleType.register'\n            },\n            {\n                id: id++,\n                code: 'OP11',\n                name: 'commands.command.operation.criticality.management',\n                state: 'system.criticality'\n            },\n            {\n                id: id++,\n                code: 'OP12',\n                name: 'commands.command.operation.criticality.new',\n                state: 'system.criticality.register'\n            },\n            {\n                id: id++,\n                code: 'OP13',\n                name: 'commands.command.operation.commodity.management',\n                state: 'pickup-portal.commodity'\n            },\n            {\n                id: id++,\n                code: 'OP14',\n                name: 'commands.command.operation.commodity.new',\n                state: 'pickup-portal.commodity.register'\n            },\n            {\n                id: id++,\n                code: 'OP15',\n                name: 'commands.command.operation.service.provider.management',\n                state: 'service-provider.serviceProvider.search'\n            },\n            {\n                id: id++,\n                code: 'OP16',\n                name: 'commands.command.operation.service.provider.new',\n                state: 'service-provider.serviceProvider.register'\n            },\n            {\n                id: id++,\n                code: 'OP17',\n                name: 'commands.command.operation.driver.management',\n                state: 'service-provider.driver.search'\n            },\n            {\n                id: id++,\n                code: 'OP18',\n                name: 'commands.command.operation.driver.new',\n                state: 'service-provider.driver.register'\n            },\n\n            // TR - TRANSPORT\n            {\n                id: id++,\n                code: 'TR01',\n                name: 'commands.command.transport.request.management',\n                state: 'transport.request'\n            },\n            {\n                id: id++,\n                code: 'TR02',\n                name: 'commands.command.transport.request.new',\n                state: 'transport.request.register'\n            },\n            {\n                id: id++,\n                code: 'TR03',\n                name: 'commands.command.transport.route.management',\n                state: 'transport.route'\n            },\n            {\n                id: id++,\n                code: 'TR04',\n                name: 'commands.command.transport.route.new',\n                state: 'transport.route.register'\n            },\n            {\n                id: id++,\n                code: 'TR05',\n                name: 'commands.command.transport.point.management',\n                state: 'transport.point'\n            },\n            {\n                id: id++,\n                code: 'TR06',\n                name: 'commands.command.transport.point.new',\n                state: 'transport.point.register'\n            },\n            {\n                id: id++,\n                code: 'TR07',\n                name: 'commands.command.transport.monitor',\n                state: 'transport.monitor'\n            },\n\n            // SY - SYSTEM\n            {\n                id: id++,\n                code: 'SY01',\n                name: 'commands.command.system.site.management',\n                state: 'system.site'\n            },\n            {\n                id: id++,\n                code: 'SY02',\n                name: 'commands.command.system.site.new',\n                state: 'system.site.register'\n            },\n            {\n                id: id++,\n                code: 'SY03',\n                name: 'commands.command.system.plant.management',\n                state: 'system.company'\n            },\n            {\n                id: id++,\n                code: 'SY04',\n                name: 'commands.command.system.plant.new',\n                state: 'system.company.register'\n            },\n            {\n                id: id++,\n                code: 'SY05',\n                name: 'commands.command.system.workplace.management',\n                state: 'system.workplace'\n            },\n            {\n                id: id++,\n                code: 'SY06',\n                name: 'commands.command.system.workplace.new',\n                state: 'system.workplace.register'\n            },\n            {\n                id: id++,\n                code: 'SY07',\n                name: 'commands.command.system.calendar.management',\n                state: 'system.calendar'\n            },\n            {\n                id: id++,\n                code: 'SY08',\n                name: 'commands.command.system.calendar.new',\n                state: 'system.calendar.register'\n            },\n            {\n                id: id++,\n                code: 'SY09',\n                name: 'commands.command.system.checklist.management',\n                state: 'system.checklist'\n            },\n            {\n                id: id++,\n                code: 'SY10',\n                name: 'commands.command.system.checklist.configure',\n                state: 'system.checklist.configure'\n            },\n            {\n                id: id++,\n                code: 'SY11',\n                name: 'commands.command.system.checklist.templates.management',\n                state: 'system.checklist.templates'\n            },\n            {\n                id: id++,\n                code: 'SY12',\n                name: 'commands.command.system.checklist.templates.new',\n                state: 'system.checklist.templates.register'\n            },\n            {\n                id: id++,\n                code: 'SY13',\n                name: 'commands.command.system.inspection-plan.management',\n                state: 'system.inspection-plan'\n            },\n            {\n                id: id++,\n                code: 'SY14',\n                name: 'commands.command.system.inspection-plan.register',\n                state: 'system.inspection-plan.register'\n            },\n            {\n                id: id++,\n                code: 'SY15',\n                name: 'commands.command.system.user.management',\n                state: 'system.user'\n            },\n            {\n                id: id++,\n                code: 'SY16',\n                name: 'commands.command.system.user.register',\n                state: 'system.user.register'\n            },\n            {\n                id: id++,\n                code: 'SY17',\n                name: 'commands.command.system.profile.management',\n                state: 'system.profile'\n            },\n            {\n                id: id++,\n                code: 'SY18',\n                name: 'commands.command.system.profile.register',\n                state: 'system.profile.register'\n            },\n\n            // PO - PORTARIA\n            {\n                id: id++,\n                code: 'PO01',\n                name: 'commands.command.portaria.totem',\n                state: 'totem'\n            },\n            {\n                id: id++,\n                code: 'PO02',\n                name: 'commands.command.portaria.panel',\n                state: 'tv.entrance-call-panel'\n            },\n            {\n                id: id++,\n                code: 'PO03',\n                name: 'commands.command.portaria.configuration',\n                state: 'tv.entrance-call-configuration'\n            },\n\n            // CO - CONFIGURATION\n            {\n                id: id++,\n                code: 'CO01',\n                name: 'commands.command.configuration',\n                state: 'configuration.workplace'\n            }\n        ];\n\n        function go(command) {\n            $state.go(command.state);\n            service.toggle();\n        }\n\n        function toggle() {\n            service.visible = !service.visible;\n            service.command = undefined;\n        }\n\n        angular.extend(service, {\n            toggle: toggle,\n            go: go\n        });\n\n        return service;\n    });\n\n})();\n","(function() {\n\t'use strict';\n\n\tangular.module('les-date-format').filter('lesDateFormat', lesDateFormat);\n\n\tlesDateFormat.$inject = ['moment'];\n\n\tfunction lesDateFormat(moment) {\n\t\treturn function(date, format) {\n\t\t\treturn moment(date).format(format);\n\t\t};\n\t}\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-email-pattern').directive('lesEmailPattern', function (lesCommonsWebService) {\n        return {\n            scope: {\n                'inputEmailId': '=',\n                'model': '=ngModel',\n                'isRequired': '=?',\n                'placeholderText': '=',\n                'inputName': '=?',\n                'minTags': '=?',\n                'hasVirtualKeyboard': '=?',\n                'disabled': '=ngDisabled'\n            },\n            templateUrl: lesCommonsWebService.base + 'components/les-email-pattern/les-email-pattern.html',\n            link: function ($scope) {\n\n                $scope.isNotValid = isNotValid;\n                $scope.cleanEmptyModel = cleanEmptyModel;\n\n                $scope.isRequired = !!$scope.isRequired;\n\n                if (!$scope.inputName) {\n                    $scope.inputName = 'inputEmails';\n                }\n\n                if (!$scope.minTags) {\n\n                    if ($scope.isRequired) {\n                        $scope.minTags = 1;\n                    }\n                    else {\n                        $scope.minTags = 0;\n                    }\n                }\n\n                function isNotValid() {\n                    return ($scope.isRequired) && (!$scope.model || $scope.model.length < $scope.minTags);\n                }\n\n                function cleanEmptyModel() {\n                    if ($scope.model !== undefined && $scope.model.length === 0) {\n                        $scope.model = undefined;\n                    }\n                }\n            }\n        };\n    });\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-plate-pattern').directive('lesPlatePattern', function (lesCommonsWebService) {\n        return {\n            scope: {\n                'inputPlateId': '=',\n                'model': '=ngModel',\n                'isRequired': '=?',\n                'placeholderText': '=',\n                'inputName': '=?',\n                'minTags': '=?',\n                'hasVirtualKeyboard': '=?',\n                'disabled': '=ngDisabled'\n            },\n            templateUrl: lesCommonsWebService.base + 'components/les-plate-pattern/les-plate-pattern.html',\n            link: function ($scope) {\n\n                $scope.isNotValid = isNotValid;\n                $scope.capitalize = capitalize;\n                $scope.cleanEmptyModel = cleanEmptyModel;\n\n                $scope.isRequired = !!$scope.isRequired;\n\n                if (!$scope.inputName) {\n                    $scope.inputName = 'inputPlates';\n                }\n\n                if (!$scope.minTags) {\n\n                    if ($scope.isRequired) {\n                        $scope.minTags = 1;\n                    }\n                    else {\n                        $scope.minTags = 0;\n                    }\n                }\n\n                function capitalize(tag) {\n                    tag.text = tag.text.toUpperCase();\n                }\n\n                function isNotValid() {\n                    return ($scope.isRequired) && (!$scope.model || $scope.model.length < $scope.minTags);\n                }\n\n                function cleanEmptyModel() {\n                    if ($scope.model !== undefined && $scope.model.length === 0) {\n                        $scope.model = undefined;\n                    }\n                }\n            }\n        };\n    });\n\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-loader').directive('loader', function (lesCommonsWebService) {\n        return {\n            templateUrl: lesCommonsWebService.base + 'components/loader/loader.html',\n            controller: function () { }\n        };\n    });\n\n})();\n","(function() {\n    'use strict';\n\n    angular.module('les-phone-pattern').directive('lesPhonePattern', function(lesCommonsWebService) {\n        return {\n            scope: {\n                inputPhoneId: '=',\n                model: '=ngModel',\n                isRequired: '=?',\n                placeholderText: '=',\n                inputName: '=?',\n                minTags: '=?',\n                minLength: '=?',\n                maxLength: '=?',\n                hasVirtualKeyboard: '=?',\n                disabled: '=ngDisabled'\n            },\n            templateUrl: lesCommonsWebService.base + 'components/les-phone-pattern/les-phone-pattern.html',\n            link: function($scope) {\n                $scope.inputName = $scope.inputName || 'phoneNumbers';\n                $scope.minTags = $scope.minTags || 0;\n                $scope.minLength = $scope.minLength || 4;\n                $scope.maxLength = $scope.maxLength || 17;\n\n                $scope.isNotValid = isNotValid;\n                $scope.cleanEmptyModel = cleanEmptyModel;\n\n                $scope.isRequired = !!$scope.isRequired;\n\n                function isNotValid() {\n                    return $scope.isRequired && (!$scope.model || $scope.model.length < $scope.minTags);\n                }\n\n                function cleanEmptyModel() {\n                    if ($scope.model !== undefined && $scope.model.length === 0) {\n                        $scope.model = undefined;\n                    }\n                }\n            }\n        };\n    });\n})();\n","(function () {\n    'use strict';\n\n    angular.module('les-steps-indicator').directive('stepsIndicator', function (lesCommonsWebService) {\n        return {\n            restrict: 'E',\n            require: '^steps',\n            scope: {\n                'steps': '='\n            },\n            bindToController: true,\n            templateUrl: lesCommonsWebService.base + 'components/steps-indicator/steps-indicator.html',\n            controllerAs: 'stepsIndicatorCtrl',\n            controller: function ($state) {\n                var self = this;\n                self.stringifyStepClass = stringifyStepClass;\n                self.isVisible = isVisible;\n                self.isDone = isDone;\n                self.getStepIndex = getStepIndex;\n\n                function isVisible(step) {\n                    return (typeof step.isVisible === 'function') ? step.isVisible() : true;\n                }\n\n                function isDone(stepIndex) {\n                    return stringifyStepClass(stepIndex) === 'done';\n                }\n\n                function getStepIndex(step) {\n                    var visibleSteps = self.steps.filter(function (_step) {\n                        return isVisible(_step);\n                    });\n                    return visibleSteps.indexOf(step) + 1;\n                }\n\n                function stringifyStepClass(stepIndex) {\n                    var currentStepIndex = self.steps.map(function (step) {\n                        return step.stateName;\n                    }).indexOf($state.$current.name);\n                    if (stepIndex < currentStepIndex) {\n                        return 'done';\n                    }\n                    if (stepIndex === currentStepIndex) {\n                        return 'active';\n                    }\n                    return '';\n                }\n            }\n        };\n    });\n\n})();\n","(function() {\n    'use strict';\n    angular.module('les-top').controller('publicTopController', publicTopController);\n\n    publicTopController.$inject = ['headerModel'];\n\n    function publicTopController(headerModel) {\n        var self = this;\n\n        activate();\n\n        function activate() {\n            self.model = headerModel;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n    angular.module('les-top').directive('publicTop', function (lesCommonsWebService) {\n        return {\n            restrict: 'E',\n            templateUrl: lesCommonsWebService.base + 'partials/top/public/top-public.html',\n            controller: 'publicTopController',\n            controllerAs: 'publicTopCtrl',\n            bindToController: true,\n            transclude: true,\n            scope: {\n                initial: '@'\n            }\n        };\n    });\n})();\n","angular.module('commons-web').run(['$templateCache', function($templateCache) {$templateCache.put('commons/confirm/confirm.html','<div class=\"modal-header\">\\n\\t<h3 class=\"modal-title\" ng-bind=\"modalOptions.title\"></h3>\\n    <i class=\"close-icon fa fa-times-circle\" ng-click=\"modalOptions.cancel()\"></i>\\n</div>\\n<div class=\"modal-body modal-break-line\" ng-class=\"{ \\'modal-break-line\\': modalOptions.breakLine }\">\\n    <div class=\"warning\">\\n\\t\\t<p ng-bind=\"modalOptions.title\"></p>\\n\\t</div>\\n</div>\\n<div class=\"modal-footer\">\\n\\t<div class=\"row\">\\n        <div class=\"col-xs-24 col-sm-12\">\\n\\t\\t\\t<button class=\"btn btn-primary btn-block\" id=\"btnCloseModal\" ng-click=\"modalOptions.confirm()\" ng-bind=\"modalOptions.ok\"></button>\\n\\t\\t</div>\\n\\t\\t<div class=\"col-xs-24 col-sm-12\">\\n\\t\\t\\t<button class=\"btn btn-default btn-block\" id=\"btnCancelModal\" ng-click=\"modalOptions.cancel()\" ng-bind=\"modalOptions.cancel\"></button>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n');\n$templateCache.put('components/click-overlay/click-overlay.html','<div ng-if=\"visible\" class=\"click-overlay\">\\n    <div ng-click=\"close()\" class=\"click-overlay-background\"></div>\\n    <div class=\"click-overlay-content\">\\n        <ng-transclude></ng-transclude>\\n    </div>\\n</div>\\n');\n$templateCache.put('components/les-commands/les.commands.html','<div ng-show=\"model.visible\" class=\"les-commands\">\\n    <div ng-click=\"toggle()\" class=\"les-commands-overlay\"></div>\\n\\n    <div class=\"les-commands-wrapper\">\\n        <div class=\"les-commands-input\">\\n            <select chosen\\n                autofocus\\n                placeholder-text-single=\"\\'{{translate(\\'commands.search.holder\\')}}\\'\" \\n                no-results-text=\"\\'{{translate(\\'global.noResultsFor\\')}}\\'\" \\n                ng-model=\"model.command\" \\n                ng-options=\"command as (command.code + \\' - \\' + (command.name | translate)) for command in model.commands | orderBy:\\'code\\'\"\\n                ng-change=\"model.go(model.command)\">\\n                <option></option>\\n            </select>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('components/language-select/language-select.html',' <span class=\"language-selection\">\\n    <span ng-repeat=\"lang in languageSelectCtrl.availableLanguages\">\\n        <a href \\n            id=\"language-{{lang.code}}\"\\n            ng-click=\"languageSelectCtrl.changeLanguage(lang)\" \\n            ng-disabled=\"languageSelectCtrl.currentLang.code === lang.code\">{{ lang.displayName }}</a>\\n        <span ng-show=\"!$last\">\\u2022</span>\\n    </span>\\n </span>\\n');\n$templateCache.put('components/les-phone-pattern/les-phone-pattern.html','<div>\\n\\t<tags-input ng-hide=\"hasVirtualKeyboard\" placeholder=\"{{placeholderText | translate}}\" \\n\\t\\tname=\"{{inputName}}\"  \\n\\t\\tid=\"{{inputPhoneId}}\"\\n\\t\\tng-required=\"isNotValid()\" \\n        min-tags=\"{{minTags}}\" \\n        focus-class=\"tags-input-focused\"\\n        min-length=\"{{minLength}}\"\\n        max-length=\"{{maxLength}}\" \\n        register-custom-form-control\\n        allowed-tags-pattern=\"^[0-9]+$\" \\n        on-tag-removed=\"cleanEmptyModel()\"\\n        s-input-focused\\n        ng-disabled=\"disabled\"\\n\\t\\tng-model=\"model\"></tags-input>\\n\\n\\t<tags-input2 ng-show=\"hasVirtualKeyboard\" placeholder=\"{{ placeholderText | translate}}\" \\n        name=\"{{inputName}}\" \\n        id=\"{{inputPhoneId}}\" \\n\\t\\tng-required=\"isNotValid()\"\\n        min-tags=\"{{minTags}}\"\\n        focus-class=\"tags-input-focused\" \\n        min-length=\"{{minLength}}\"\\n        max-length=\"{{maxLength}}\" \\n        register-custom-form-control\\n        allowed-tags-pattern=\"^[0-9]+$\" \\n        on-tag-removed=\"cleanEmptyModel()\"\\n        s-input-focused\\n        ng-disabled=\"disabled\"\\n        ng-model=\"model\"></tags-input2>\\n\\n    <input type=\"hidden\" name=\"{{inputName}}-hidden\" ng-model=\"model\" ng-required=\"isNotValid()\">\\n</div>\\n');\n$templateCache.put('components/les-email-pattern/les-email-pattern.html','<div>\\n    <tags-input ng-hide=\"hasVirtualKeyboard\" placeholder=\"{{placeholderText | translate}}\" \\n        ng-required=\"isNotValid()\"\\n        name=\"{{inputName}}\" \\n        id=\"{{inputEmailId}}\" \\n        min-tags=\"{{minTags}}\"\\n        register-custom-form-control\\n        allowed-tags-pattern=\"^[A-Za-z0-9]+[A-Za-z0-9._%+-]*@(?:[A-Za-z0-9-]+.)+[A-Za-z]{2,}\"\\n        on-tag-removed=\"cleanEmptyModel()\"\\n        focus-class=\"tags-input-focused\" \\n        ng-disabled=\"disabled\"\\n        ng-model=\"model\"></tags-input>\\n\\n    <tags-input2 ng-show=\"hasVirtualKeyboard\" placeholder=\"{{placeholderText | translate}}\" \\n        ng-required=\"isNotValid()\"\\n        name=\"{{inputName}}\" \\n        id=\"{{inputEmailId}}\" \\n        min-tags=\"{{minTags}}\"\\n        register-custom-form-control\\n        allowed-tags-pattern=\"^[A-Za-z0-9]+[A-Za-z0-9._%+-]*@(?:[A-Za-z0-9-]+.)+[A-Za-z]{2,}\"\\n        on-tag-removed=\"cleanEmptyModel()\"\\n        focus-class=\"tags-input-focused\" \\n        ng-disabled=\"disabled\"\\n        ng-model=\"model\"></tags-input2>\\n\\t\\n    <input type=\"hidden\" name=\"{{inputName}}-hidden\" ng-model=\"model\" ng-required=\"isNotValid()\">\\n</div>\\n');\n$templateCache.put('components/les-plate-pattern/les-plate-pattern.html','<div>\\n\\t<tags-input ng-hide=\"hasVirtualKeyboard\" \\n\\t\\tplaceholder=\"{{placeholderText | translate}}\"\\n\\t\\tname=\"{{inputName}}\"  \\n\\t\\tid=\"{{inputPhoneId}}\"\\n\\t\\tng-required=\"isNotValid()\" \\n        min-tags=\"{{minTags}}\" \\n\\t\\ton-tag-added=\"capitalize($tag)\"\\n        on-tag-removed=\"cleanEmptyModel()\"\\n        register-custom-form-control\\n\\t\\tallowed-tags-pattern=\"^[a-zA-Z]{3}[0-9]{4}$|^(?!.{8})(?=(?:[^0-9]*[0-9]){3})(?=(?:[^a-zA-Z]*[a-zA-Z]){4}).*$\"\\n        ng-disabled=\"disabled\"\\n\\t\\tng-model=\"model\"></tags-input>\\n\\n\\t<tags-input2 ng-show=\"hasVirtualKeyboard\" \\n\\t\\tplaceholder=\"{{ placeholderText | translate}}\" \\n        name=\"{{inputName}}\" \\n        id=\"{{inputPhoneId}}\" \\n\\t\\tng-required=\"isNotValid()\"\\n        min-tags=\"{{minTags}}\"\\n        on-tag-added=\"capitalize($tag)\"\\n        on-tag-removed=\"cleanEmptyModel()\"\\n        register-custom-form-control\\n        allowed-tags-pattern=\"^[a-zA-Z]{3}[0-9]{4}$|^(?!.{8})(?=(?:[^0-9]*[0-9]){3})(?=(?:[^a-zA-Z]*[a-zA-Z]){4}).*$\"\\n        ng-disabled=\"disabled\"\\n\\t\\tng-model=\"model\"></tags-input2>\\n</div>\\n');\n$templateCache.put('components/loader/loader.html','<div class=\"loader\">\\n    <svg class=\"loader-spinner\" width=\"120px\" height=\"120px\" viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\">\\n        <circle class=\"loader-circle\" fill=\"none\" stroke-width=\"4\" cx=\"33\" cy=\"33\" r=\"30\"></circle>\\n    </svg>\\n</div>\\n');\n$templateCache.put('components/steps-indicator/steps-indicator.html','<ul class=\"steps-indicator\">\\n    <li ng-if=\"stepsIndicatorCtrl.isVisible(step)\" \\n        ng-repeat=\"step in stepsIndicatorCtrl.steps\" \\n        ng-class=\"stepsIndicatorCtrl.stringifyStepClass($index)\">\\n        <div ng-hide=\"stepsIndicatorCtrl.isDone($index)\" class=\"step-number\" ng-bind=\"stepsIndicatorCtrl.getStepIndex(step)\"></div>\\n        <div ng-show=\"stepsIndicatorCtrl.isDone($index)\" class=\"step-number\"><i class=\"material-icons\">check</i></div>\\n        <div class=\"step-title hidden-xs\" translate=\"{{step.translationKey}}\"></div>\\n    </li>\\n</ul>\\n');\n$templateCache.put('partials/block-ui/block-ui.html','<div class=\"block-ui-overlay fade-in\"></div>\\n<div class=\"block-ui-message-container fade-in\">\\n    <loader></loader>\\n</div>\\n');\n$templateCache.put('partials/footer/footer-public.html','<div class=\"footer footer-white bigger-font\">\\n    <p class=\"left\" translate=\"footer.copyright\" translate-values=\"{year: year}\"></p>\\n\\n    <p class=\"right\">\\n\\t\\t<a href=\"#\" translate=\"footer.link.help\"></a>\\n\\t</p>\\n</div>\\n');\n$templateCache.put('partials/footer/footer-totem.html','<div class=\"footer footer-white\">\\n\\t<p class=\"left\" translate=\"footer.copyright\" translate-values=\"{year: year}\"></p>\\n</div>\\n');\n$templateCache.put('partials/footer/footer.html','<div class=\"footer bigger-font\">\\t\\n\\t<!--<p class=\"right\">\\n\\t\\t<a href=\"#\" translate=\"footer.link.home\"></a> | \\n\\t\\t<a href=\"#\" translate=\"footer.link.messages-and-alerts\"></a> | \\n\\t\\t<a href=\"#\" translate=\"footer.link.logs\"></a> | \\n\\t\\t<a href=\"#\" translate=\"footer.link.help\"></a>\\n\\t</p>-->\\n</div>\\n');\n$templateCache.put('partials/header/header-public.html','<div class=\"header\">\\n    <div class=\"header-container container\">\\n        <div class=\"width-100\">\\n            <div class=\"title\">\\n                <h1 translate=\"{{model.title}}\" translate-values=\"{model.titleValues}\"></h1>\\n            </div>\\n\\n            <breadcrumbs initial=\"initial\" class=\"hidden-xs\"></breadcrumbs>\\n        </div>\\n    </div>\\n</div>\\n    ');\n$templateCache.put('partials/header/header-totem.html','<div class=\"header header-totem\">\\n    <div class=\"logo\">\\n        <img src=\"assets/img/logo-embraer-small.png\" alt=\"Embraer\" />\\n    </div>\\n    <div class=\"title\">\\n        <div class=\"col-sm-16 col-xs-24 no-padding\">\\n            <h1 translate=\"{{viewInfo.title}}\"></h1>\\n        </div>\\n        <div class=\"col-sm-8 hidden-xs no-padding text-right\">\\n            <div class=\"help\">\\n                <a class=\"white\" role=\"button\"><i class=\"fa fa-question-circle white\"></i>{{\\'global.need-help\\' | translate}}</a>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('partials/top/public/top-public.html','<div id=\"navbar\">\\n    <div class=\"padding-left-2\">\\n        <h1 class=\"navbar-logo\">\\n            <a title=\"{{ navbar.home | translate }}\" ui-sref=\"{{publicTopCtrl.initial}}\">\\n                <img src=\"assets/img/logo-okto-white.png\" alt=\"Okto\" height=\"20\">\\n            </a>\\n        </h1>\\n        <h2 class=\"navbar-title\" translate=\"{{ publicTopCtrl.model.module }}\"></h2>\\n    </div>\\n    <div class=\"display-flex\">\\n        <ng-transclude></ng-transclude>\\n    </div>\\n</div>\\n');\n$templateCache.put('ng-table/pager.html','<div ng-if=\"params.data.length\" class=\"pager horizontal-flex flex-space-between\">\\n    <p class=\"pager-registers\" \\n        translate=\"global.tableRegisters\" \\n        translate-values=\"{ \\n            from: (params.page() - 1) * params.count() + 1, \\n            to: (params.page() - 1) * params.count() + params.data.length, \\n            total: params.total() \\n        }\"></p>\\n    <div class=\"pagination-container\">\\n        <div ng-if=\"params.settings().counts.length > 0\" class=\"size-page\">\\n            <a ng-click=\"params.count(count)\" href ng-repeat=\"count in params.settings().counts\" ng-class=\"{\\'active-size\\': params.count() === params.settings().counts[$index]}\">\\n                {{count}}\\n            </a>\\n        </div>\\n        <ul class=\"pagination ng-table-pagination\" ng-if=\"pages.length\">\\n            <li ng-class=\"{ \\'disabled\\': ! page.active && ! page.current, \\'active\\': page.current }\" \\n                ng-repeat=\"page in pages\" \\n                ng-switch=\"page.type\">\\n                <a ng-switch-when=\"prev\" ng-click=\"params.page(page.number)\" href>\\n                    <i class=\"material-icons\">keyboard_arrow_left</i>\\n                </a>\\n\\n                <a ng-switch-when=\"first\" ng-click=\"params.page(page.number)\" href>\\n                    <span ng-bind=\"page.number\"></span>\\n                </a>\\n\\n                <a ng-switch-when=\"page\" ng-click=\"params.page(page.number)\" href>\\n                    <span ng-bind=\"page.number\"></span>\\n                </a>\\n\\n                <a ng-switch-when=\"more\" ng-click=\"params.page(page.number)\" href>\\n                    <i class=\"material-icons\">more_horiz</i>\\n                </a>\\n\\n                <a ng-switch-when=\"last\" ng-click=\"params.page(page.number)\" href>\\n                    <span ng-bind=\"page.number\"></span>\\n                </a>\\n\\n                <a ng-switch-when=\"next\" ng-click=\"params.page(page.number)\" href>\\n                    <i class=\"material-icons\">keyboard_arrow_right</i>\\n                </a>\\n            </li>\\n        </ul>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/growl/growl.html','<div  class=\"growl-container\" ng-class=\"wrapperClasses()\">\\n    <div class=\"growl-item {{message.severity}}\" ng-repeat=\"message in growlMessages.directives[referenceId].messages\" ng-class=\"alertClasses(message)\" ng-click=\"stopTimeoutClose(message)\">\\n        <i class=\"fa\"></i>\\n        <div class=\"flex-full-width\">\\n          <h4 class=\"growl-title\" ng-show=\"message.title\" ng-bind=\"message.title\"></h4>\\n          <div class=\"growl-message\" ng-bind-html=\"message.text\"></div>\\n        </div>\\n        <button type=\"button\" class=\"close\" aria-hidden=\"true\" ng-click=\"growlMessages.deleteMessage(message)\" ng-show=\"!message.disableCloseButton\">&times;</button>\\n    </div>\\n</div>\\n');}]);"]}